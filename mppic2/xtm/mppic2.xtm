;;; mppic2.xtm:libs -- PIC plasma physics simulation library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libmppic2.dylib

;;; Commentary:

;; This library uses Viktor Decyk's PIC simulation codes
;; (https://idre.ucla.edu/hpc/parallel-plasma-pic-codes) to perform a
;; particle-in-cell plasma physics simulation

;; To use this library in Extempore, first get the (slightly modified)
;; basic mppic2 serial codes from

;; https://github.com/benswift/mppic2

;; then build thd dylib with `make shared'

;; then see examples/external/mppic2.xtm

;;; Code:

(sys:load "libs/aot-cache/mppic2.xtm" 'quiet)
(sys:load-preload-check 'mppic2)
(define *xtmlib-mppic2-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/core/std.xtm" 'quiet))

(impc:aot:insert-header "xtmmppic2")

;; (sys:load "libs/core/math.xtm")
(bind-type Complexf <float,float>) ;; the only thing we use from math.xtm

;; (sys:load "libs/contrib/mpi.xtm")

;; set up the current dylib name and path (for precompilation)
(bind-dylib libmppic2
  (cond ((string=? (sys:platform) "OSX")
         "libmppic2.dylib")
        ((string=? (sys:platform) "Linux")
         "libmppic2.so")
        ((string=? (sys:platform) "Windows")
         "libmppic2.dll")))

(bind-type timeval <i64,i64>) ;; <time_t,suseconds_t>
(bind-val ttp_ptr float*)
(bind-lib libmppic2 dtimer [void,double*,timeval*,i32]*)

;; other declarations should go here

(bind-lib libmppic2 cppinit2 [void,i32*,i32*,i32,i8**]*)
(bind-lib libmppic2 cppexit [void]*)
(bind-lib libmppic2 cppabort [void]*)
(bind-lib libmppic2 cpwtimera [void,i32,float*,double*]*)
(bind-lib libmppic2 cppsum [void,float*,float*,i32]*)
(bind-lib libmppic2 cppdsum [void,double*,double*,i32]*)
(bind-lib libmppic2 cppimax [void,i32*,i32*,i32]*)
(bind-lib libmppic2 cppdmax [void,double*,double*,i32]*)
(bind-lib libmppic2 cppncguard2l [void,float*,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppnaguard2l [void,float*,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppnacguard2l [void,float*,float*,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cpptpose [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppntpose [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cpppmove2 [void,float*,float*,float*,float*,i32*,i32*,i32*,i32*,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 ranorm [double]*)
(bind-lib libmppic2 cpdicomp2l [void,float*,i32*,i32*,i32*,i32*,i32,i32,i32,i32]*)
(bind-lib libmppic2 cpdistr2 [void,float*,float*,i32*,i32,float,float,float,float,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cppdblkp2l [void,float*,i32*,i32,i32,i32*,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cpppmovin2l [void,float*,float*,i32*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cpppcheck2l [void,float*,i32*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cppgppush2l [void,float*,float*,i32*,i32,i32,float,float,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppgppushf2l [void,float*,float*,i32*,i32*,i32*,i32,i32,float,float,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cppgppost2l [void,float*,float*,i32*,i32,float,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppporder2la [void,float*,float*,float*,float*,i32*,i32*,i32*,i32*,i32*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cppporderf2la [void,float*,float*,float*,float*,i32*,i32*,i32*,i32*,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cppporder2lb [void,float*,float*,float*,float*,i32*,i32*,i32*,i32*,i32*,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libmppic2 cppcguard2xl [void,float*,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppaguard2xl [void,float*,i32,i32,i32,i32]*)
(bind-lib libmppic2 cmppois22 [void,Complexf*,Complexf*,i32,Complexf*,float,float,float,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cwpfft2rinit [void,i32*,Complexf*,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppfft2rmxx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppfft2rmxy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppfft2rm2xx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppfft2rm2xy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cwppfft2rm [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32*,Complexf*,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cwppfft2rm2 [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32*,Complexf*,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cinit_omp [void,i32]*)
(bind-lib libmppic2 csetnthsize [void,i32]*)
(bind-lib libmppic2 cgetnthsize [i32]*)
(bind-lib libmppic2 ranorm [double]*)
(bind-lib libmppic2 cpdicomp2l [void,float*,i32*,i32*,i32*,i32*,i32,i32,i32,i32]*)
(bind-lib libmppic2 cpdistr2 [void,float*,float*,i32*,i32,float,float,float,float,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)
;; (bind-lib libmppic2 cppgpush2l [void,float*,float*,float*,i32,i32,i32*,float,float,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cppgpost2l [void,float*,float*,i32,i32,float,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cppdsortp2yl [void,float*,float*,i32*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppcguard2xl [void,float*,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cppaguard2xl [void,float*,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cppois22 [void,Complexf*,Complexf*,i32,Complexf*,float,float,float,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libmppic2 cwpfft2rinit [void,i32*,Complexf*,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cppfft2rxx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cppfft2rxy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cppfft2r2xx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cppfft2r2xy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cwppfft2r [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32*,Complexf*,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
;; (bind-lib libmppic2 cwppfft2r2 [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32*,Complexf*,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)


;; simulation parameters

(bind-val indx i32 7)
(bind-val indy i32 7)
(bind-val npx i32 100)
(bind-val npy i32 100)
(bind-val ndim i32 3)
(bind-val tend float 10.0)
(bind-val dt float 0.1)
(bind-val qme float -1.0)
(bind-val vtx float 1.0)
(bind-val vty float 1.0)
(bind-val vx0 float 0.0)
(bind-val vy0 float 0.0)
(bind-val ax float .912871)
(bind-val ay float .912871)
(bind-val idimp i32 4)
(bind-val ipbc i32 1)
(bind-val relativity i32 1)
(bind-val idps i32 2)
(bind-val wke_ptr float*)
(bind-val we_ptr float*)
(bind-val wt float 0.0)
(bind-val mx i32 16)
(bind-val my i32 16)
(bind-val xtras float 0.2) ;; fraction of extra particles needed for particle management

;; declare scalars for standard code
(bind-val nx i32 0)
(bind-val ny i32 0)
(bind-val nxh i32 0)
(bind-val nyh i32 0)
(bind-val nxe i32 0)
(bind-val nye i32 0)
(bind-val nxeh i32 0)
(bind-val nnxe i32 0)
(bind-val nxyh i32 0)
(bind-val nxhy i32 0)
(bind-val mx1 i32 0) ;; mx1 = number of tiles in x direction
(bind-val ntime i32 0)
(bind-val nloop i32 0)
(bind-val isign i32 0)
(bind-val ierr_ptr i32*)
(bind-val qbme float 0.0)
(bind-val affp float 0.0)
(bind-val np double 0.0)

;; declare scalars for MPI code
(bind-val ntpose i32 1)
(bind-val nvp_ptr i32*)
(bind-val idproc_ptr i32*)
(bind-val kstrt i32 0)
(bind-val npmax i32 0)
(bind-val kxp i32 0)
(bind-val kyp i32 0)
(bind-val nypmx_ptr i32*)
(bind-val nypmn_ptr i32*)
(bind-val nyp_ptr i32*)
(bind-val noff_ptr i32*)
(bind-val npp_ptr i32*)
(bind-val nps i32 1)
(bind-val myp1 i32 0)
(bind-val mxyp1 i32 0)

;; declare scalars for OpenMP code
(bind-val nppmx_ptr i32*) 
(bind-val nppmx0 i32 0) 
(bind-val nbmaxp i32 0) 
(bind-val ntmaxp i32 0) 
(bind-val npbmx i32 0) 
(bind-val irc_ptr i32*) 
(bind-val nvpp i32 0)

(impc:aot:do-or-emit
 (call-as-xtlang
  (cinit_omp nvpp)
  (set! np (* (convert npx double) (convert npy double)))
  (set! nx (<< 1:i32 indx))
  (set! ny (<< 1:i32 indy))
  (set! nxh (/ nx 2))
  (set! nyh (/ ny 2))
  (set! nxe (+ nx 2))
  (set! nye (+ ny 2))
  (set! nxeh (/ nxe 2))
  (set! nnxe (* ndim nxe))
  (set! nxyh (/ (if (> nx ny) nx ny) 2))
  (set! nxhy (if (> nxh ny) nxh ny))
  (set! mx1 (+ (/ (- nx 1) mx) 1))
  (set! nloop (convert (+ (/ tend dt) .0001) i32))
  (set! qbme qme)
  (set! affp (convert (/ (* (convert nx double)
                            (convert ny double))
                         np)
                      float))
  (cppinit2 idproc_ptr nvp_ptr 0 null)
  (set! kstrt (+ (pref idproc_ptr 0) 1))
  (let ((nvp (pref nvp_ptr 0)))
    (if (> nvp ny)
        (begin
          (if (= kstrt 1)
              (printf "Too many processors requested: ny nvp=%d %d\n" ny nvp))
          (cppexit))))))

;; declare and allocate arrays for standard code:

;; part = particle array
(bind-val part float*)
;; qe = electron charge density with guard cells
(bind-val qe float*)
;; fxye/g_bxyze = smoothed electric/magnetic field with guard cells
(bind-val fxye float*)
;; qt = scalar charge density field array in fourier space
(bind-val qt Complexf*)
;; fxyt = vector electric field array in fourier space
(bind-val fxyt Complexf*)
;; ffc = form factor array for poisson solver
(bind-val ffc Complexf*)
;; mixup = bit reverse table for FFT
(bind-val mixup i32*)
;; sct = sine/cosine table for FFT
(bind-val sct Complexf*)
(bind-val wtot |4,float|) ;; float[4] in original C code
(bind-val work |4,float|) ;; float[4] in original C code

;; ;; declare arrays for MPI code
;; ;; bs/br = complex send/receive buffers for data transpose
(bind-val bs Complexf*)
(bind-val br Complexf*)
;; ;; sbufl/sbufr = particle buffers sent to nearby processors
;; ;; rbufl/rbufr = particle buffers received from nearby processors
(bind-val sbufl float*)
(bind-val sbufr float*)
(bind-val rbufl float*)
(bind-val rbufr float*)
;; ;; edges[0:1] = lower:upper y boundaries of particle partition
(bind-val edges |2,float|)
;; ;; scs/scr = guard cell buffers received from nearby processors
(bind-val scs float*)
(bind-val scr float*)

;; ;; declare arrays for OpenMP code
;; ;; ppart = tiled particle array
;; ;; ppbuff = buffer array for reordering tiled particle array
(bind-val ppart float*)
(bind-val ppbuff float*)
;; ;; kpic = number of particles in each tile
(bind-val kpic i32*)
;; ;; ncl = number of particles departing tile in each direction
;; ;; iholep = location/destination of each particle departing tile
(bind-val ncl i32*)
(bind-val iholep i32*)
;; ;; ncll/nclr/mcll/mclr = number offsets send/received from processors
(bind-val ncll i32*)
(bind-val nclr i32*)
(bind-val mcll i32*)
(bind-val mclr i32*)

(impc:aot:do-or-emit
 (call-as-xtlang
  ;; init MPI partition variables: edges, nyp, noff, nypmx
  ;; edges[0:1] = lower:upper boundary of particle partition
  ;; nyp = number of primary (complete) gridpoints in particle partition
  ;; noff_ptr = lowermost global gridpoint in particle partition
  ;; nypmx = maximum size of particle partition, including guard cells
  ;; nypmn = minimum value of nyp
  (let ((nvp (pref nvp_ptr 0)))
    (cpdicomp2l (aref-ptr edges 0) nyp_ptr noff_ptr nypmx_ptr nypmn_ptr ny kstrt nvp idps)
    (if (< (pref nypmn_ptr 0) 1)
        (begin
          (if (= kstrt 1)
              (printf "combination not supported nvp ny = %d %d\n" nvp ny))
          (cppexit)))
    ;; kxp = number of complex grids in each field partition in x direction
    (set! kxp (+ 1 (/ (- nxh 1) nvp)))
    ;; kyp = number of complex grids in each field partition in y direction
    (set! kxp (+ 1 (/ (- ny 1) nvp)))
    ;; npmax = maximum number of electrons in each partition
    (set! npmax (convert (* (/ np (convert nvp)) 1.25) i32))
    ;; myp1 = number of tiles in y direction
    (set! myp1 (+ 1:i32 (/ (- (pref nyp_ptr 0) 1) my)))
    (set! mxyp1 (* mx1 myp1)))))

(bind-func mppic2_alloc_arrays
  (lambda ()
    (println "allocating memory for data arrays")
    (let (;; allocate and initialize data for standard code
          (part_:float* (halloc (* idimp npmax)))
          (qe_:float* (halloc (* nxe (pref nypmx_ptr 0))))
          (fxye_:float* (halloc (* ndim nxe (pref nypmx_ptr 0))))
          (qt_:Complexf* (halloc (* nxe kxp)))
          (fxyt_:Complexf* (halloc (* ndim kxp nye)))
          (ffc_:Complexf* (halloc (* kxp nyh)))
          (mixup_:i32* (halloc nxhy))
          (sct_:Complexf* (halloc nxyh))
          (kpic_:i32* (halloc mxyp1))
          ;; allocate and initialize data for MPI code
          (bs_:Complexf* (halloc (* ndim kxp kyp)))
          (br_:Complexf* (halloc (* ndim kxp kyp)))
          (scs_:float* (halloc (* nxe ndim)))
          (scr_:float* (halloc (* nxe ndim))))
      (set! part part_)
      (set! qe qe_)
      (set! fxye fxye_)
      (set! qt qt_)
      (set! fxyt fxyt_)
      (set! ffc ffc_)
      (set! mixup mixup_)
      (set! sct sct_)
      (set! kpic kpic_)
      (set! br br_)
      (set! scs scs_)
      (set! scr scr_)
      (set! bs bs_))))

(impc:aot:do-or-emit (mppic2_alloc_arrays))

(bind-func mppic2_free_arrays
  (lambda ()
    (free part)
    (free qe)
    (free fxye)
    (free qt)
    (free fxyt)
    (free ffc)
    (free mixup)
    (free sct)
    (free kpic)
    (free br)
    (free scs)
    (free scr)
    (free bs)))

(impc:aot:do-or-emit
 (call-as-xtlang
  ;; prepare fft tables
  (cwpfft2rinit mixup sct indx indy nxhy nxyh)
  ;; calculate form factors
  (cmppois22 qt fxyt isign ffc ax ay affp we_ptr nx ny kstrt nye kxp nyh)
  ;; initialize electrons
  (pset! npp_ptr 0 0)
  (cpdistr2 part (aref-ptr edges 0) npp_ptr nps vtx vty vx0 vy0 npx npy nx ny idimp npmax idps ipbc ierr_ptr)
  ;; check for particle initialization error
  (if (<> (pref ierr_ptr 0) 0)
      (begin
        (if (= kstrt 1)
            (printf "particle initialization error: ierr=%d\n" (pref ierr_ptr 0)))
        (cppexit)))
  ;; find number of particles in each of mx, my tiles: updates kpic, nppmx
  (cppdblkp2l part kpic (pref npp_ptr 0) (pref noff_ptr 0) nppmx_ptr idimp npmax mx my mx1 mxyp1 irc_ptr)
  (if (<> (pref irc_ptr 0) 0)
      (begin
        (printf "%d cppdblkp2l error irc=%d\n" kstrt (pref irc_ptr 0))
        (cppexit)))
  1))

(bind-func mppic2_alloc_vector_arrays
  (lambda ()
    (println "allocating memory for vector arrays")
    (set! nppmx0 (convert (* (+ 1.0:float xtras) (convert (pref nppmx_ptr 0) float)) i32))
    (set! ntmaxp (convert (* xtras (convert (pref nppmx_ptr 0))) i32))
    (set! npbmx (convert (* xtras (convert (pref nppmx_ptr 0))) i32))
    (set! nbmaxp (convert (* 0.25:float (convert (* mx1 npbmx))) i32))
    (println "npbmx:" npbmx "nbmaxp:" nbmaxp "nppmx0:" nppmx0 "ntmaxp:" ntmaxp)
    (let ((sbufl_:float* (halloc (* idimp nbmaxp)))
          (sbufr_:float* (halloc (* idimp nbmaxp)))
          (rbufl_:float* (halloc (* idimp nbmaxp)))
          (rbufr_:float* (halloc (* idimp nbmaxp)))
          (ppart_:float* (halloc (* idimp nppmx0 mxyp1)))
          (ppbuff_:float* (halloc (* idimp npbmx mxyp1)))
          (ncl_:i32* (halloc (* 8 mxyp1)))
          (iholep_:i32* (halloc (* 2:i32 (+ ntmaxp 1) mxyp1)))
          (ncll_:i32* (halloc (* 3 mxyp1)))
          (nclr_:i32* (halloc (* 3 mxyp1)))
          (mcll_:i32* (halloc (* 3 mxyp1)))
          (mclr_:i32* (halloc (* 3 mxyp1))))
      (set! sbufl_ sbufl)
      (set! sbufr_ sbufr)
      (set! rbufl_ rbufl)
      (set! rbufr_ rbufr)
      (set! ppart_ ppart)
      (set! ppbuff_ ppbuff)
      (set! ncl_ ncl)
      (set! iholep_ iholep)
      (set! ncll_ ncll)
      (set! nclr_ nclr)
      (set! mcll_ mcll)
      (set! mclr_ mclr))))

(bind-func mppic2_free_vector_arrays
  (lambda ()
    (free sbufl)
    (free sbufr)
    (free rbufl)
    (free rbufr)
    (free ppart)
    (free ppbuff)
    (free ncl)
    (free iholep)
    (free ncll)
    (free nclr)
    (free mcll)
    (free mclr)))

(impc:aot:do-or-emit (mppic2_alloc_vector_arrays))

(impc:aot:do-or-emit
 (call-as-xtlang
  ;; copy ordered particle data for OpenMP
  (println "part:" (cast part i8*) "ppart:" (cast ppart i8*) "kpic:" (cast kpic i8*) "npp_ptr:" (pref
npp_ptr 0) "noff:" (pref noff_ptr 0) "nppmx0:" nppmx0 "idimp:"
idimp "npmax:" npmax "mx:" mx "my:" my "mx1:" mx1 "mxyp1:"
mxyp1 "irc_ptr:" (cast irc_ptr i8*))
  (cpppmovin2l part ppart kpic (pref npp_ptr 0) (pref noff_ptr 0) nppmx0 idimp npmax mx my mx1 mxyp1 irc_ptr)
  (if (<> (pref irc_ptr 0) 0)
      (begin
        (printf "%d cpppmovin2l overflow error irc=%d\n" kstrt (pref irc_ptr 0))
        (cppexit)))
  ;; sanity check
  (cpppcheck2l ppart kpic (pref noff_ptr 0) (pref nyp_ptr 0) idimp nppmx0 nx mx my mx1 myp1 irc_ptr)
  (if (<> (pref irc_ptr 0) 0)
      (begin
        (printf "%d,cpppcheck2l error: irc=%d\n" kstrt (pref irc_ptr 0))
        (cppexit)))))

(bind-func mppic2_print_energies
  (lambda ()
    (printf "ntime: %d\n" ntime)
    (printf "Total Field Kinetic and Total Energies:\n")
    (printf "%e %e %e\n"
            (convert (pref we_ptr 0) double)
            (convert (pref wke_ptr 0) double)
            (convert (+ (pref wke_ptr 0) (pref we_ptr 0)) double))
    void))

(bind-func external_field
  (lambda ()
    void))

(bind-func mppic2_step
  (lambda ()
    ;; deposit charge with OpenMP: updates qe
    (doloop (j (* nxe (pref nypmx_ptr 0)))
      (pset! qe j 0.))
    (cppgppost2l ppart qe kpic (pref noff_ptr 0) qme idimp nppmx0 mx my nxe (pref nypmx_ptr 0) mx1 mxyp1)

    ;; add guard cells with OpenMP: updates qe
    (cppaguard2xl qe (pref nyp_ptr 0) nx nxe (pref nypmx_ptr 0))
    (cppnaguard2l qe scr (pref nyp_ptr 0) nx kstrt (pref nvp_ptr 0) nxe (pref nypmx_ptr 0))

    ;; transform charge to fourier space with OpenMP: updates qt
    ;; modifies qe
    (set! isign -1:i32)
    (cwppfft2rm (convert qe) qt bs br isign ntpose mixup sct ttp_ptr indx indy kstrt (pref nvp_ptr 0) nxeh nye kxp kyp (pref nypmx_ptr 0) nxhy nxyh)

    ;; calculate force/charge in fourier space with OpenMP: updates fxyt, we
    (set! isign -1:i32)
    (cmppois22 qt fxyt isign ffc ax ay affp we_ptr nx ny kstrt nye kxp nyh)

    ;; transform force to real space with OpenMP: updates fxye
    ;; modifies fxyt
    (set! isign 1:i32)
    (cwppfft2rm2 (convert fxye) fxyt bs br isign ntpose mixup sct ttp_ptr indx indy kstrt (pref nvp_ptr 0) nxeh nye kxp kyp (pref nypmx_ptr 0) nxhy nxyh)

    ;; copy guard cells with OpenMP: updates fxye
    (cppncguard2l fxye (pref nyp_ptr 0) kstrt (pref nvp_ptr 0) nnxe (pref nypmx_ptr 0))
    (cppcguard2xl fxye (pref nyp_ptr 0) nx ndim nxe (pref nypmx_ptr 0))

    ;; push particles with OpenMP:
    (pset! wke_ptr 0 0.0)
    ;; updates ppart and wke
    ;;    cppgppush2l(ppart,fxye,kpic,noff,nyp,qbme,dt,&wke,nx,ny,mx,my,
    ;;                idimp,nppmx0,nxe,nypmx,mx1,mxyp1,ipbc);           
    ;; updates ppart, wke, ncl, iholep, irc
    (cppgppushf2l ppart fxye kpic ncl iholep (pref noff_ptr 0) (pref nyp_ptr 0) qbme dt wke_ptr nx ny mx my idimp nppmx0 nxe (pref nypmx_ptr 0) mx1 mxyp1 ntmaxp irc_ptr)
    (if (<> (pref irc_ptr 0) 0)
        (begin
          (printf "%d,cppgppushf2l error: irc=%d\n" kstrt (pref irc_ptr 0))
          (cppexit)))

    ;; reorder particles by tile with OpenMP
    ;; first part of particle reorder on x and y cell with mx, my tiles:
    ;; updates ppart, ppbuff, sbufl, sbufr, ncl, iholep, ncll, nclr, irc
    ;;    cppporder2la(ppart,ppbuff,sbufl,sbufr,kpic,ncl,iholep,ncll,nclr,
    ;;                 noff,nyp,idimp,nppmx0,nx,ny,mx,my,mx1,myp1,npbmx,  
    ;;                 ntmaxp,nbmaxp,&irc);                               
    ;; updates: ppart, ppbuff, sbufl, sbufr, ncl, ncll, nclr, irc
    (cppporderf2la ppart ppbuff sbufl sbufr ncl iholep ncll nclr idimp nppmx0 mx1 myp1 npbmx ntmaxp nbmaxp irc_ptr)
    (if (<> (pref irc_ptr 0) 0)
        (begin
          (printf "%d,cppporderf2la error:ntmaxp,irc=%d,%d\n" kstrt ntmaxp (pref irc_ptr 0))
          (cppexit)))

    ;; move particles into appropriate spatial regions:
    ;; updates rbufr, rbufl, mcll, mclr
    (cpppmove2 sbufr sbufl rbufr rbufl ncll nclr mcll mclr kstrt (pref nvp_ptr 0) idimp nbmaxp mx1)

    ;; second part of particle reorder on x and y cell with mx, my tiles:
    ;; updates ppart, kpic
    (cppporder2lb ppart ppbuff rbufl rbufr kpic ncl iholep mcll mclr idimp nppmx0 mx1 myp1 npbmx ntmaxp nbmaxp irc_ptr)
    (if (<> (pref irc_ptr 0) 0)
        (begin
          (printf "%d,cppporder2lb error:nppmx0,irc=%d,%d\n" kstrt nppmx0 (pref irc_ptr 0))
          (cppexit)))

    ;; energy diagnostic
    (afill! wtot (pref we_ptr 0) (pref wke_ptr 0) 0. (+ (pref we_ptr 0) (pref wke_ptr 0)))
    (cppsum (aref-ptr wtot 0) (aref-ptr work 0) 4)
    (pset! we_ptr 0 (aref wtot 0))
    (pset! wke_ptr 0 (aref wtot 1))

    (if (= ntime 0)
        (mppic2_print_energies))

    ;; ntime is incremented in the scheme callback
    (set! ntime (+ ntime 1))
    ntime))

(bind-func mppic2_loop
  (lambda (time:i64 delta_t:double)
    (mppic2_step)    
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time mppic2_loop next_time delta_t))))

;; to start it running
;; (mppic2_loop (now) (/ 1. 60.))

;; visualisation (root node only)

;; (impc:aot:do-or-emit
;;  (sys:load "libs/contrib/pic/mppic2-visuals.xtm"))

(impc:aot:insert-footer "xtmmppic2")
(define *xtmlib-mppic2-loaded* #t)
