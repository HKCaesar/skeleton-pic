;;; pic2.xtm:libs -- PIC plasma physics simulation library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libpic2.dylib

;;; Commentary:

;; This library uses Viktor Decyk's PIC simulation codes
;; (https://idre.ucla.edu/hpc/parallel-plasma-pic-codes) to perform a
;; particle-in-cell plasma physics simulation

;; To use this library in Extempore, first get the (slightly modified)
;; basic pic2 serial codes from

;; https://github.com/benswift/skeleton-pic

;; then build thd dylib with `make shared'

;; then see examples/external/pic2.xtm

;;; Code:

(sys:load "libs/aot-cache/pic2.xtm" 'quiet)
(sys:load-preload-check 'pic2)
(define *xtmlib-pic2-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/core/std.xtm" 'quiet))

(impc:aot:insert-header "xtmpic2")

;; (sys:load "libs/core/math.xtm")
(bind-type Complexf <float,float>) ;; the only thing we use from math.xtm

;; (sys:load "libs/contrib/mpi.xtm")

;; set up the current dylib name and path (for precompilation)
(bind-dylib libpic2
  (cond ((string=? (sys:platform) "OSX")
         "libpic2.dylib")
        ((string=? (sys:platform) "Linux")
         "libpic2.so")
        ((string=? (sys:platform) "Windows")
         "libpic2.dll")))

(bind-type timeval <i64,i64>) ;; <time_t,suseconds_t>

(bind-lib libpic2 dtimer [void,double*,timeval*,i32]*)

;; from push2.h
(bind-lib libpic2 caguard2l [void,float*,i32,i32,i32,i32]*)
(bind-lib libpic2 ccguard2l [void,float*,i32,i32,i32,i32]*)
(bind-lib libpic2 cdgpush2l [void,double*,double*,double,double,double*,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cdistr2 [void,float*,float,float,float,float,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cdsortp2yl [void,float*,float*,i32*,i32,i32,i32]*)
(bind-lib libpic2 cfft2r2x [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cfft2r2y [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cfft2rxx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cfft2rxy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cgpost2l [void,float*,float*,float,i32,i32,i32,i32]*)
(bind-lib libpic2 cgpush2l [void,float*,float*,float,float,float*,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cpois22 [void,Complexf*,Complexf*,i32,Complexf*,float,float,float,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cwfft2r2 [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 cwfft2rinit [void,i32*,Complexf*,i32,i32,i32,i32]*)
(bind-lib libpic2 cwfft2rx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libpic2 randum [double]*)
(bind-lib libpic2 ranorm [double]*)

;; we don't use the timing stuff for now, but here it is:

(bind-val indx i32 7)
(bind-val indy i32 7)
(bind-val npx i32 100)
(bind-val npy i32 100)
(bind-val ndim i32 3)
(bind-val tend float 10.0)
(bind-val dt float 0.04)
(bind-val qme float -1.0)
(bind-val vtx float 1.0)
(bind-val vty float 1.0)
(bind-val vtz float 1.0)
(bind-val vx0 float 0.0)
(bind-val vy0 float 0.0)
(bind-val vz0 float 0.0)
(bind-val ax float .912871)
(bind-val ay float .912871)
(bind-val ci float .1)
(bind-val idimp i32 5)
(bind-val ipbc i32 1)
(bind-val sortime i32 0)
(bind-val relativity i32 1)
(bind-val idps i32 2)
(bind-val wke_ptr float*)
(bind-val we_ptr float*)
(bind-val wt float 0.0)
;; declare scalars for standard code
(bind-val np i32 0)
(bind-val nx i32 0)
(bind-val ny i32 0)
(bind-val nxh i32 0)
(bind-val nyh i32 0)
(bind-val nxe i32 0)
(bind-val nye i32 0)
(bind-val nxeh i32 0)
(bind-val nnxe i32 0)
(bind-val nxyh i32 0)
(bind-val nxhy i32 0)
(bind-val ny1 i32 0)
;; nloop = number of time steps in simulation
(bind-val nloop i32 0)
;; ntime = current time step
(bind-val ntime i32 0)
(bind-val qbme float 0.0)
(bind-val affp float 0.0)
(bind-val dth float 0.0)

(impc:aot:do-or-emit
 (call-as-xtlang
  (set! nx (<< 1:i32 indx))
  (set! ny (<< 1:i32 indy))
  (set! nxh (/ nx 2))
  (set! nyh (/ ny 2))
  (set! nxe (+ nx 2))
  (set! nye (+ ny 2))
  (set! nxeh (/ nxe 2))
  (set! nnxe (* ndim nxe))
  (set! nxyh (/ (if (> nx ny) nx ny) 2))
  (set! nxhy (if (> nxh ny) nxh ny))
  (set! ny1 (+ ny 1))
  (set! nloop (convert (+ (/ tend dt) .0001) i32))
  (set! qbme qme)
  (set! np (* npx npy))
  (set! affp (convert (/ (* (convert nx double)
                            (convert ny double))
                         (convert np double))
                      float))))

;; declare and allocate arrays for standard code:

;; part, part2 = particle arrays
(bind-val part float*)
(bind-val part2 float*)
(bind-val tpart float*) ;; tmp ptr (for ptr swaps)

;; qe = electron charge density with guard cells
(bind-val qe float*)
;; fxye/g_bxyze = smoothed electric/magnetic field with guard cells
(bind-val fxye float*)
;; qt = scalar charge density field array in fourier space
(bind-val qt Complexf*)
;; ffc = form factor array for poisson solver
(bind-val ffc Complexf*)
;; mixup = bit reverse table for FFT
(bind-val mixup i32*)
;; sct = sine/cosine table for FFT
(bind-val sct Complexf*)
;; ihole = location of hole left in particle arrays
(bind-val ihole i32*)
;; npic = scratch array for reordering particles
(bind-val npicy i32*)
(bind-val wtot |7,float|) ;; float[7] in original C code
(bind-val work |7,float|) ;; float[7] in original C code
(bind-val info |7,i32|)   ;; i32[7] in original C code

;; timing stuff (not used in the current version of the bpic_step main loop)

;; float time
;; struct timeval itime
;; float tdpost = 0.0, tguard = 0.0, ttp = 0.0, tfield = 0.0
;; float tdjpost = 0.0, tpush = 0.0, tsort = 0.0, tmov = 0.0
;; float tfft[2] = {0.0,0.0}
;; double dtime
(bind-val isign i32 0)

(bind-func pic2_alloc_arrays
  (lambda ()
    (println "allocating memory for data arrays")
    (let ((part_:float* (halloc (* idimp np)))
          (part2_:float* (halloc (* idimp np)))
          (qe_:float* (halloc (* nxe nye)))
          (fxye_:float* (halloc (* ndim nxe nye)))
          (ffc_:Complexf* (halloc (* nxh nyh)))
          (mixup_:i32* (halloc nxhy))
          (sct_:Complexf* (halloc nxyh))
          (npicy_:i32* (halloc ny1)))
      (set! part part_)
      (set! part2 part2_)
      (set! qe qe_)
      (set! fxye fxye_)
      (set! ffc ffc_)
      (set! mixup mixup_)
      (set! sct sct_)
      (set! npicy npicy_))))

(impc:aot:do-or-emit (pic2_alloc_arrays))

(bind-func pic2_free_arrays
  (lambda ()
    (free part)
    (free part2)
    (free qe)
    (free fxye)
    (free ffc)
    (free mixup)
    (free sct)
    (free npicy)))

(impc:aot:do-or-emit
 (call-as-xtlang
  ;; prepare fft tables
  (cwfft2rinit mixup sct indx indy nxhy nxyh)
  ;; calculate form factors
  (cpois22 (convert qe) (convert fxye) isign ffc ax ay affp we_ptr nx ny nxeh nye nxh nyh)
  ;; initialize electrons
  (cdistr2 part vtx vty vx0 vy0 npx npy idimp np nx ny ipbc)))

(bind-func pic2_print_energies
  (lambda ()
    (printf "ntime: %d\n" ntime)
    (printf "Total Field Kinetic and Total Energies:\n")
    (printf "%e %e %e\n"
            (convert (pref we_ptr 0) double)
            (convert (pref wke_ptr 0) double)
            (convert (+ (pref wke_ptr 0) (pref we_ptr 0)) double))
    void))

(bind-func external_field
  (lambda ()
    void))

;; * * * start main iteration loop * * *

(bind-func pic2_step
  (lambda ()
    ;; deposit charge with standard procedure: updates qe
    (doloop (j (* nxe nye))
      (pset! qe j 0.))
    (cgpost2l part qe qme np idimp nxe nye)

    ;; add guard cells with standard procedure: updates qe
    (caguard2l qe nx ny nxe nye)

    ;; transform charge to fourier space with standard procedure: updates qe
    (set! isign -1:i32)
    (cwfft2rx (convert qe) isign mixup sct indx indy nxeh nye nxhy nxyh)

    ;; calculate force/charge in fourier space with standard procedure: updates fxye
    (set! isign -1:i32)
    (cpois22 (convert qe) (convert fxye) isign ffc ax ay affp we_ptr nx ny nxeh nye nxh nyh)

    ;; transform force to real space with standard procedure: updates fxye
    (set! isign 1:i32)
    (cwfft2r2 (convert fxye) isign mixup sct indx indy nxeh nye nxhy nxyh)

    ;; copy guard cells with standard procedure: updates fxye
    (ccguard2l fxye nx ny nxe nye)

    ;; push particles with standard procedure: updates part, wke
    (pset! wke_ptr 0 0.0)
    (cgpush2l part fxye qbme dt wke_ptr idimp np nx ny nxe nye ipbc)

    (external_field)

    (if (and (> sortime 0) (= (% ntime sortime) 0))
        (begin
          (cdsortp2yl part part2 npicy idimp np ny1)
          ;; exchange pointers
          (set! tpart part)
          (set! part part2)
          (set! part2 tpart)))

    (if (= ntime 0)
        (pic2_print_energies))

    ;; ntime is incremented in the scheme callback
    (set! ntime (+ ntime 1))
    ntime))

;; * * * end main iteration loop * * *

;; (bind-func pic2_loop
;;   (lambda ()
;;     (while (< (pic2_step) 250)
;;       1)
;;     (pic2_print_energies)))

(bind-func pic2_loop
  (lambda ()
    (let ((ntime (pic2_step)))
      (if (= (% ntime 1000) 0)
          (println "ntime:" ntime))
      (callback (now) pic2_loop))))

(impc:aot:insert-footer "xtmpic2")
(define *xtmlib-pic2-loaded* #t)
