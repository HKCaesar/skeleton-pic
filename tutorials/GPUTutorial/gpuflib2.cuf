!-----------------------------------------------------------------------
! CUDA Fortran Library for GPU Tutorial
! written by Viktor K. Decyk, UCLA
      module gpuflib2
      use cudafor
      implicit none
!
      integer :: nblock_size = 64, ngrid_size = 1, maxgsx = 65535
      integer, private :: mmcc = 0
      integer, private :: devid, crc
      save
!
      contains
!
      attributes(global) subroutine emptyKernel()
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine setgbsize(nblock)
! set blocksize
      integer :: nblock
      nblock_size = nblock
      end subroutine
!
!-----------------------------------------------------------------------
      integer function getmmcc()
! get major and minor computer capability
      getmmcc = mmcc
      end function
!
!-----------------------------------------------------------------------
      subroutine empty_kernel()
      implicit none
      integer :: ngx, ngy
      type (dim3) :: dimBlock, dimGrid
      ngx = min(nblock_size,32768)
      ngy = (ngrid_size - 1)/ngx + 1
      dimBlock = dim3(nblock_size,1,1)
      dimGrid = dim3(ngx,ngy,1)
      crc = cudaGetLastError()
      call emptyKernel<<<dimGrid,dimBlock>>>()
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc /= 0) then
         write (*,*) 'emptyKernel real Error=', crc, ':',               &
     &cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine init_cu(dev,irc)
! initialize CUDA with device dev or selects best GPU available
! searches throughs devices, selects the device with the most compute
! units, and saves the device id devid
! if dev is a valid device, it is used, otherwise the GPU with the
! most multi-processors is selected 
! error code is modified only if there is an error
      implicit none
      integer :: dev, irc
! local data
      integer :: maxcpus = 0, jm = -1
      integer :: j, js, ndevs, maxunits
      integer(kind=8) :: msize
      double precision :: z
      type (cudaDeviceProp) :: prop
! returns number of device
      crc = cudaGetDeviceCount(ndevs)
      if (crc /= 0) then
         write (*,*) 'cudaGetDeviceCount Error=', crc, ':',             &
     &cudaGetErrorString(crc)
         irc = 1
      endif
! get information about devices
      do j = 1, ndevs
      js = j - 1
      crc = cudaGetDeviceProperties(prop,js)
      if (crc /= 0) then
         write (*,*) 'cudaGetDeviceProperties Error=', crc, ':',        &
     &cudaGetErrorString(crc)
         prop%name = ''
      endif
      maxunits = prop%multiProcessorCount
      if (dev <= 0) then
         write (*,*) 'j=', js, ':CUDA_DEVICE_NAME=', trim(prop%name)
         write (*,*) '    CUDA_MULTIPROCESSOR_COUNT=', maxunits
         msize = prop%totalGlobalMem
         z = dble(msize)/1073741824.0d0
         mmcc = 10*prop%major + prop%minor
         write (*,*) '    CUDA_GLOBAL_MEM_SIZE=',msize,'(',real(z),'GB)'
         write (*,*) '    Capability=', mmcc
         if (maxunits > maxcpus) then
            maxcpus = maxunits
            jm = js
         endif
      endif
      enddo
      devid = jm
      if (dev >= 0) devid = mod(dev,ndevs)
      write (*,*) 'using device j=', devid
! get properties for this device
      crc = cudaGetDeviceProperties(prop,devid)
      maxgsx = prop%maxGridSize(1)
      mmcc = 10*prop%major + prop%minor
! set device
      crc = cudaSetDevice(devid)
      if (crc /= 0) then
         write (*,*) 'cudaSetDevice Error=', crc, ':',                  &
     &cudaGetErrorString(crc)
         irc = 1
      endif
! run empty kernel
      call empty_kernel()
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine end_cu()
! terminate CUDA
      implicit none
      crc = cudaThreadExit()
      if (crc /= 0) then
         write (*,*) 'cudaThreadExit Error=', crc, ':',                 &
     &cudaGetErrorString(crc)
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gcopy1(a,b,nx)
! 1d copy a = b
! one block of mx threads copies mx values
! ((nx-1)/mx+1) independent blocks
      implicit none
      integer, value :: nx
      real, dimension(nx) :: a, b
! local data
      integer :: j, js, jb, mx
      mx = blockDim%x
      js = threadIdx%x
      jb = blockIdx%x
!
      j = js + mx*(jb - 1)
      if (j <= nx) a(j) = b(j)
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gcopy2a(a,b,nx,ny)
! 2d copy a = b
! one block of mx threads copies mx values
! nbx*ny independent blocks
      implicit none
      integer, value :: nx, ny
      real, dimension(nx,ny) :: a, b
! local data
      integer :: j, js, jb, k, mx
      mx = blockDim%x
      js = threadIdx%x
      jb = blockIdx%x
      k = blockIdx%y
!
      j = js + mx*(jb - 1)
      if ((j <= nx).and.(k <= ny)) a(j,k) = b(j,k)
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gcopy2b(a,b,nx,ny)
! 2d copy a = b
! one block of mx threads copies nx values
! ny independent blocks
      implicit none
      integer, value :: nx, ny
      real, dimension(nx,ny) :: a, b
! local data
      integer :: j, k, mx
      mx = blockDim%x
      k = blockIdx%x
!
      j = threadIdx%x
      do while (j <= nx)
         if (k <= ny) a(j,k) = b(j,k)
         j = j + mx
      enddo
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gsaxpy2(a,b,s,nx,ny)
! 2d vector multiply a = s*b + a
! one block of mx threads copies nx values
! ny independent blocks
      implicit none
      integer, value :: nx, ny
      real, value :: s
      real, dimension(nx,ny) :: a, b
! local data
      integer :: j, k, mx
      mx = blockDim%x
      k = blockIdx%x
!
      j = threadIdx%x
      do while (j <= nx)
         if (k <= ny) a(j,k) = s*b(j,k) + a(j,k)
         j = j + mx
      enddo
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gcopy3(a,b,nx,ny)
! 2d copy a = b
! one block of mx*my threads copies mx*my values
! ((nx-1)/mx+1)*((ny-1)/my+1) independent blocks
      implicit none
      integer, value :: nx, ny
      real, dimension(nx,ny) :: a, b
! local data
      integer :: j, k, js, ks, jb, kb, mx, my
      mx = blockDim%x; my = blockDim%y
      js = threadIdx%x; ks = threadIdx%y
      jb = blockIdx%x; kb = blockIdx%y
!
      k = ks + my*(kb - 1)
      j = js + mx*(jb - 1)
      if ((j <= nx) .and. (k <= ny)) a(j,k) = b(j,k)
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gtranspose2(a,b,nx,ny)
! a = transpose(b)
! one block of mx*mx threads transposes mx*mx values
! ((nx-1)/mx+1)*((ny-1)/mx+1) independent blocks
      implicit none
      integer, value :: nx, ny
      real, dimension(ny,nx) :: a
      real, dimension(nx,ny) :: b
! local data
      integer :: j, k, js, ks, jb, kb, joff, koff, mx, mxv
      real, shared, dimension(*) :: s
      mx = blockDim%x; mxv = mx + 1
      js = threadIdx%x; ks = threadIdx%y
      jb = blockIdx%x; kb = blockIdx%y
      koff = mx*(kb - 1)
      joff = mx*(jb - 1)
!
      k = ks + koff
      j = js + joff
      if ((j <= nx) .and. (k <= ny)) s(js+mxv*(ks-1)) = b(j,k)
! synchronize threads
      call syncthreads()
      j = ks + joff
      k = js + koff
      if ((j <= nx) .and. (k <= ny)) a(k,j) = s(ks+mxv*(js-1))
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gsum1(a,sa,nx)
! 1d serial sum reductions, each of length mx
! sa = sum(a)
      implicit none
      integer, value :: nx
      real, dimension(:) :: a, sa
! local data
      integer :: j, js, jb, mx, joff, mxm
      real :: t
      real, shared, dimension(*) :: s
      mx = blockDim%x
      js = threadIdx%x
      jb = blockIdx%x
      joff = mx*(jb - 1)
!
      j = js + joff
! copy global data to shared memory
      if (j <= nx) s(js) = a(j)
! synchronize to make sure each thread in block has the data
      call syncthreads()
      if (js==1) then
         mxm = nx - joff
         if (mxm > mx) mxm = mx
! perform serial local sum reduction: result in t
         t = 0.0
         do j = 1, mxm
            t = t + s(j)
         enddo
! accumulate results to global memory for each block
! for devices with compute capability 2.x
         t = atomicAdd(sa(1),t)
      endif
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(device) subroutine lsum2(sdata,n)
! finds local sum of n data items shared by threads
! using binary tree method. input is modified
      implicit none
      real, dimension(*) :: sdata
      integer, value :: n
! local data
      integer :: l, k
      real :: s
      l = threadIdx%x
      k = blockDim%x/2
      s = 0.0
!
      if (l <= n) s = sdata(l)
      do while (k > 0)
         if (l <= k) then
            if ((l+k) <= n) then
               s = s + sdata(l+k)
               sdata(l) = s
            endif
         endif
         call syncthreads()
         k = k/2
      enddo
!
      end subroutine
!
!-----------------------------------------------------------------------
      attributes(global) subroutine gsum2(a,d,nx)
! segmented 1d sum reductions, each of length mx
! forall (j = 1:nbx); d(j) = sum(a(1+mx*(j-1):min(nx,mx*j))); end forall
! parallel summation
      implicit none
      integer, value :: nx
      real, dimension(:) :: a, d
! local data
      integer :: j, js, jb, mx, joff, mxm
      real, shared, dimension(*) :: s
      mx = blockDim%x
      js = threadIdx%x
      jb = blockIdx%x
      joff = mx*(jb - 1)
!
      j = js + joff
! copy global data to shared memory
      if (j <= nx) s(js) = a(j)
! synchronize to make sure each thread in block has the data
      call syncthreads()
      mxm = nx - joff
      if (mxm > mx) mxm = mx
! perform parallel local sum reduction: result in s(1)
      call lsum2(s,mxm)
! write out result to global memory for each block
      if (js==1) d(jb) = s(1)
!
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_copy1(a,b,mx)
! 2d copy of length nx, with block size mx
! one block of mx threads copies mx values
! ((nx-1)/mx+1) independent blocks
      implicit none
      integer :: mx
      real, device, dimension(:) :: a, b
! local data
      integer :: nx, nbx
      type (dim3) :: dimBlock, dimGrid
      nx = min(size(a,1),size(b,1))
      nbx = (nx - 1)/mx + 1
      dimBlock = dim3(mx,1,1)
      dimGrid = dim3(nbx,1,1)
      crc = cudaGetLastError()
!
      call gcopy1<<<dimGrid,dimBlock>>>(a,b,nx)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gcopy1 error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_copy2a(a,b,mx)
! 2d copy of length nx, ny, with block size mx
! one block of mx threads copies mx values
! nbx*ny independent blocks
      implicit none
      integer :: mx
      real, device, dimension(:,:) :: a, b
! local data
      integer :: nx, ny, nbx
      type (dim3) :: dimBlock, dimGrid
      nx = min(size(a,1),size(b,1)); ny = min(size(a,2),size(b,2))
      nbx = (nx - 1)/mx + 1
      dimBlock = dim3(mx,1,1)
      dimGrid = dim3(nbx,ny,1)
      crc = cudaGetLastError()
!
      call gcopy2a<<<dimGrid,dimBlock>>>(a,b,nx,ny)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gcopy2a error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_copy2b(a,b,mx)
! 2d copy of length nx, ny, with block size mx
! one block of mx threads copies nx values
! ny independent blocks
      implicit none
      integer :: mx
      real, device, dimension(:,:) :: a, b
! local data
      integer :: nx, ny
      type (dim3) :: dimBlock, dimGrid
      nx = min(size(a,1),size(b,1)); ny = min(size(a,2),size(b,2))
      dimBlock = dim3(mx,1,1)
      dimGrid = dim3(ny,1,1)
      crc = cudaGetLastError()
!
      call gcopy2b<<<dimGrid,dimBlock>>>(a,b,nx,ny)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gcopy2b error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_saxpy2(a,b,s,mx)
! 2d vector multiply of length nx, ny, with block size mx
! one block of mx threads copies nx values
! ny independent blocks
      implicit none
      integer :: mx
      real :: s
      real, device, dimension(:,:) :: a, b
! local data
      integer :: nx, ny
      type (dim3) :: dimBlock, dimGrid
      nx = min(size(a,1),size(b,1)); ny = min(size(a,2),size(b,2))
      dimBlock = dim3(mx,1,1)
      dimGrid = dim3(ny,1,1)
      crc = cudaGetLastError()
!
      call gsaxpy2<<<dimGrid,dimBlock>>>(a,b,s,nx,ny)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gsaxpy2 error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_copy3(a,b,mx,my)
! 2d copy of length nx, ny, with block size mx, my
! one block of mx*my threads copies mx*my values
! ((nx-1)/mx+1)*((ny-1)/my+1) independent blocks
      implicit none
      integer :: mx, my
      real, device, dimension(:,:) :: a, b
! local data
      integer :: nx, ny, nbx, nby
      type (dim3) :: dimBlock, dimGrid
      nx = min(size(a,1),size(b,1)); ny = min(size(a,2),size(b,2))
      nbx = (nx - 1)/mx + 1; nby = (ny - 1)/my + 1
      dimBlock = dim3(mx,my,1)
      dimGrid = dim3(nbx,nby,1)
      crc = cudaGetLastError()
!
      call gcopy3<<<dimGrid,dimBlock>>>(a,b,nx,ny)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gcopy3 error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_transpose2(a,b,mx)
! 2d transpose of length nx, ny, with block size mx, mx
! one block of mx*mx threads transposes mx*mx values
! ((nx-1)/mx+1)*((ny-1)/mx+1) independent blocks
      implicit none
      integer :: mx
      real, device, dimension(:,:) :: a, b
! local data
      integer :: nx, ny, nbx, nby, ns
      type (dim3) :: dimBlock, dimGrid
      nx = min(size(a,2),size(b,1)); ny = min(size(a,1),size(b,2))
      nbx = (nx - 1)/mx + 1; nby = (ny - 1)/mx + 1
      dimBlock = dim3(mx,mx,1)
      dimGrid = dim3(nbx,nby,1)
! calculate size of shared memory
      ns = (mx + 1)*mx*sizeof(a(1,1))
      crc = cudaGetLastError()
!
      call gtranspose2<<<dimGrid,dimBlock,ns>>>(a,b,nx,ny)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gtranspose2 error=',crc,':',                      &
     &cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_sum1(a,sa,mx)
! 1d serial sum reductions, each of length mx
! one block of mx threads sums mx values
! ((nx-1)/mx+1) independent blocks
      implicit none
      integer :: mx
      real, device, dimension(:) :: a, sa
! local data
      integer :: nx, nbx, ns
      type (dim3) :: dimBlock, dimGrid
      nx = size(a,1)
      nbx = (nx - 1)/mx + 1
      dimBlock = dim3(mx,1,1)
      dimGrid = dim3(nbx,1,1)
      sa(1) = 0.0
! calculate size of shared memory
      ns = mx*sizeof(a(1))
      crc = cudaGetLastError()
!
      call gsum1<<<dimGrid,dimBlock,ns>>>(a,sa,nx)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gsum1 error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_sum2(a,d,mx)
! segmented 1d parallel sum reductions, each of length mx
! one block of mx threads sums mx values
! ((nx-1)/mx+1) independent blocks
      implicit none
      integer :: mx
      real, device, dimension(:) :: a, d
! local data
      integer :: nx, nbx, ns
      type (dim3) :: dimBlock, dimGrid
      nx = size(a,1)
      nbx = (nx - 1)/mx + 1
      dimBlock = dim3(mx,1,1)
      dimGrid = dim3(nbx,1,1)
! calculate size of shared memory
      ns = mx*sizeof(a(1))
      crc = cudaGetLastError()
!
      call gsum2<<<dimGrid,dimBlock,ns>>>(a,d,nx)
!
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gsum2 error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
      end subroutine
!
!-----------------------------------------------------------------------
      subroutine gpu_sum3(a,d,sa,mx)
! segmented 1d parallel sum reduction
! one block of mx threads sums mx values
! ((nx-1)/mx+1) independent blocks
      implicit none
      integer :: mx
      real, device, dimension(:) :: a, d, sa
! local data
      integer :: nxs, nbx, n, ns
      type (dim3) :: dimBlock, dimGrid
      nxs = size(a,1)
      nbx = (nxs - 1)/mx + 1
      dimBlock = dim3(mx,1,1)
      dimGrid = dim3(nbx,1,1)
! calculate size of shared memory
      ns = mx*sizeof(a(1))
      crc = cudaGetLastError()
      call gsum2<<<dimGrid,dimBlock,ns>>>(a,d,nxs)
!     crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gsum2:0 error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
! write out result
      if (nbx==1) then
         dimGrid%x = 1
         crc = cudaGetLastError()
         call gcopy1<<<dimGrid,dimBlock>>>(sa,d,1)
         crc = cudaThreadSynchronize()
         crc = cudaGetLastError()
         if (crc) then
            write (*,*) 'gcopy1:0 error=',crc,':',cudaGetErrorString(crc)
            stop
         endif
         return
      endif
! reduce further if necessary
      if (nbx > 1) then
         nxs = nbx
         nbx = (nxs - 1)/mx + 1
         dimGrid%x = nbx
         crc = cudaGetLastError()
         call gsum2<<<dimGrid,dimBlock,ns>>>(d,sa,nxs)
         if (nbx==1) crc = cudaThreadSynchronize()
         crc = cudaGetLastError()
         if (crc) then
            write (*,*) 'gsum2:1 error=',crc,':',cudaGetErrorString(crc)
            stop
         endif
         n = 1
      endif
      if (nbx==1) return
! iterate if necessary
      do while (nbx > 1)
         n = n + nbx
         nxs = nbx
         nbx = (nxs - 1)/mx + 1
         dimGrid%x = nbx
         crc = cudaGetLastError()
         call gsum2<<<dimGrid,dimBlock,ns>>>(sa(n-nxs:n-1),sa(n:),nxs)
!        crc = cudaThreadSynchronize()
         crc = cudaGetLastError()
         if (crc) then
            write (*,*) 'gsum2:n error=',crc,':',cudaGetErrorString(crc)
            stop
         endif
      enddo
! write out result
      dimGrid%x = 1
      crc = cudaGetLastError()
      call gcopy1<<<dimGrid,dimBlock>>>(sa,sa(n:),1)
      crc = cudaThreadSynchronize()
      crc = cudaGetLastError()
      if (crc) then
         write (*,*) 'gcopy1:n error=',crc,':',cudaGetErrorString(crc)
         stop
      endif
!
      end subroutine
!
      end module
