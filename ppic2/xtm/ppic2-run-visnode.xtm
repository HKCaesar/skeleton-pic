;;; ppic2.xtm:examples -- example of the pic code in use

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcpic2.dylib

;;; Commentary:

;; for this file, extempore needs to be run from the skeleton-pic
;; directory

;; to run this with MPI, you'll need an appfile (e.g. ppic2.app), which will look
;; something like:

;; -np 1 extempore --port 7099 --run path/to/ppic2.xtm
;; -np 1 extempore --port 7097 --run path/to/ppic2.xtm
;; ... (depending on how many processes you want to run)

;; then, run extempore with mpi run:

;; > mpirun --app ppic2.app

;;; Code:

(sys:load "ppic2/xtm/ppic2.xtm")
(sys:load "nanomsg/local-node.xtm")

(bind-val REMOTE_LOCATIONS i64 1)
(bind-val REMOTE_NODES_PER_LOCATION i64 1)

;; create & connect sockets
(local_create_sockets (call-as-xtlang (* REMOTE_LOCATIONS REMOTE_NODES_PER_LOCATION)))
(local_connect_sockets 9000)

(call-as-xtlang (println "LOCAL_SOCKET_ARRAY_SIZE:" LOCAL_SOCKET_ARRAY_SIZE))

;; start the read loop running
(local_nonblocking_nanomsg_loop)

;; visualisation data (streamed back from remote nodes)

(bind-val RESPONSE_DATA_ARRAY |32,NodeResponseData|) ;; size should be at least LOCAL_SOCKET_ARRAY_SIZE

(bind-func local_response_handler
  (lambda (node_index:i32 buf:i8* buflen:i64)
    (if (<> buflen RESPONSE_MSG_SIZE)
        (println "msg doesn't seem to be a NodeResponseData, dropping..." buflen))
    (let ((dest_ptr (cast (aref-ptr RESPONSE_DATA_ARRAY node_index) i8*))
          (i 0))
      (memcpy dest_ptr buf buflen))
    void))

;; (call-as-xtlang
;;  (doloop (i 10)
;;    (println (aref (tref-ptr (aref-ptr RESPONSE_DATA_ARRAY 0) 2) i))))

(sys:load "ppic2/xtm/ppic2-visuals.xtm")

(bind-func ppic2_visuals
  (lambda ()
    ;; nanovg
    (nvg_clear)
    (nvgBeginFrame vg width height pixel_ratio)
    (nvgResetTransform vg)
    (let ((i:i32 0))
      (dotimes (i LOCAL_SOCKET_ARRAY_SIZE)
        ;; (ppic2_visuals_charge_density_draw i nx ny 0:i32)
        (ppic2_visuals_particles_draw i 5.)
        (ppic2_qt_spectrum_draw i)
        ;; (ppic2_visuals_field_draw i)
        (ppic2_visuals_histogram_draw (convert i))))
    (nvgEndFrame vg)
    ;; poll events, swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)))

(bind-func ppic_visuals_loop
  (lambda (delta_t:double)
    (ppic2_visuals)
    (callback (+ (now) (convert (* 44100. delta_t))) ppic_visuals_loop delta_t)))

(ppic_visuals_loop (/ 1. 30))

;; (bind-func pbpic_visuals_loop
;;   (lambda (time:i64 delta_t:double)
;;     (println "pbpic_visuals_loop callback stopped")
;;     #f))

(ppic2_visuals)
