;;; ppic2.xtm:libs -- PIC plasma physics simulation library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libppic2.dylib

;;; Commentary:

;; This library uses Viktor Decyk's PIC simulation codes
;; (https://idre.ucla.edu/hpc/parallel-plasma-pic-codes) to perform a
;; particle-in-cell plasma physics simulation

;; To use this library in Extempore, first get the (slightly modified)
;; basic pic2 serial codes from

;; https://github.com/benswift/pic2

;; then build thd dylib with `make shared'

;; then see examples/external/ppic2.xtm

;;; Code:

(set! *impc:compiler:message:level* 'low)

(sys:load "libs/aot-cache/ppic2.xtm" 'quiet)
(sys:load-preload-check 'ppic2)
(define *xtmlib-ppic2-loaded* #f)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/core/std.xtm" 'quiet))

(impc:aot:insert-header "xtmppic2")

(sys:load "libs/core/math.xtm")
;; (bind-type Complexf <float,float>) ;; the only thing we use from math.xtm

;; (sys:load "libs/contrib/mpi.xtm")

;; set up the current dylib name and path (for precompilation)
(bind-dylib libmpi
  (cond ((string=? (sys:platform) "OSX")
         "libmpi.dylib")
        ((string=? (sys:platform) "Linux")
         "libmpi.so")
        ((string=? (sys:platform) "Windows")
         "libmpi.dll")))

(bind-alias MPI_Comm i8*)
(bind-alias MPI_Datatype i8*)

(bind-lib libmpi MPI_Gather [i32,i8*,i32,MPI_Datatype,i8*,i32,MPI_Datatype,i32,MPI_Comm]*)

;; set up the current dylib name and path (for precompilation)
(bind-dylib libppic2
  (cond ((string=? (sys:platform) "OSX")
         "libppic2.dylib")
        ((string=? (sys:platform) "Linux")
         "libppic2.so")
        ((string=? (sys:platform) "Windows")
         "libppic2.dll")))

(bind-val MPI_COMM_WORLD MPI_Comm)
(bind-val MPI_FLOAT MPI_Datatype)
(bind-lib-val libppic2 xtm_mpi_comm_world MPI_Comm)
(bind-lib-val libppic2 xtm_mpi_float MPI_Datatype)
(impc:aot:do-or-emit
 (call-as-xtlang (set! MPI_COMM_WORLD xtm_mpi_comm_world)
                 (set! MPI_FLOAT xtm_mpi_float)))

(bind-type timeval <i64,i64>) ;; <time_t,suseconds_t>
(bind-lib libppic2 dtimer [void,double*,timeval*,i32]*)

;; pplib2.h
(bind-lib libppic2 cppinit2 [void,i32*,i32*,i32,i8**]*)
(bind-lib libppic2 cppexit [void]*)
(bind-lib libppic2 cppabort [void]*)
(bind-lib libppic2 cpwtimera [void,i32,float*,double*]*)
(bind-lib libppic2 cppsum [void,float*,float*,i32]*)
(bind-lib libppic2 cppdsum [void,double*,double*,i32]*)
(bind-lib libppic2 cppimax [void,i32*,i32*,i32]*)
(bind-lib libppic2 cppncguard2l [void,float*,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppnaguard2l [void,float*,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cpptpose [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppntpose [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppmove2 [void,float*,float*,i32*,float*,float*,float*,float*,i32*,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)

;; ppush2.h
(bind-lib libppic2 ranorm [double]*)
(bind-lib libppic2 cpdicomp2l [void,float*,i32*,i32*,i32*,i32*,i32,i32,i32,i32]*)
(bind-lib libppic2 cpdistr2 [void,float*,float*,i32*,i32,float,float,float,float,i32,i32,i32,i32,i32,i32,i32,i32,i32*]*)
(bind-lib libppic2 cppgpush2l [void,float*,float*,float*,i32,i32,i32*,float,float,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppgpost2l [void,float*,float*,i32,i32,float,i32,i32,i32,i32]*)
(bind-lib libppic2 cppdsortp2yl [void,float*,float*,i32*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppcguard2xl [void,float*,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppaguard2xl [void,float*,i32,i32,i32,i32]*)
(bind-lib libppic2 cppois22 [void,Complexf*,Complexf*,i32,Complexf*,float,float,float,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cwpfft2rinit [void,i32*,Complexf*,i32,i32,i32,i32]*)
(bind-lib libppic2 cppfft2rxx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppfft2rxy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppfft2r2xx [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cppfft2r2xy [void,Complexf*,i32,i32*,Complexf*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cwppfft2r [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32*,Complexf*,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libppic2 cwppfft2r2 [void,Complexf*,Complexf*,Complexf*,Complexf*,i32,i32,i32*,Complexf*,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32]*)

;;;;;;;;;;;;;;;;;;;;;;
;; set problem size ;;
;;;;;;;;;;;;;;;;;;;;;;

;; spatial grid size is 2^indx x 2^indy
(bind-val indx i32 7)
(bind-val indy i32 7)
;; np{x,y} is number of particles in {x,y} direction
(bind-val npx i32 100)
(bind-val npy i32 100)

(bind-val ndim i32 2)
(bind-val tend float 10.0)
(bind-val dt float 0.1)
(bind-val qme float -1.0)
(bind-val vtx float 1.0)
(bind-val vty float 1.0)
(bind-val vx0 float 0.0)
(bind-val vy0 float 0.0)
(bind-val ax float .912871)
(bind-val ay float .912871)
(bind-val idimp i32 4)
(bind-val ipbc i32 1)
(bind-val sortime i32 0)
(bind-val idps i32 2)
(bind-val wke_ptr float*)
(bind-val we_ptr float*)
(bind-val wt float 0.0)
;; declare scalars for standard code
;; (bind-val j i32 0)
(bind-val nx i32 0)
(bind-val ny i32 0)
(bind-val nxh i32 0)
(bind-val nyh i32 0)
(bind-val nxe i32 0)
(bind-val nye i32 0)
(bind-val nxeh i32 0)
(bind-val nnxe i32 0)
(bind-val nxyh i32 0)
(bind-val nxhy i32 0)
(bind-val ny1 i32 0)
;; nloop = number of time steps in simulation
(bind-val nloop i32 0)
;; ntime = current time step
(bind-val ntime i32 0)
;; current timestep length
(bind-val steptime double 0.0)
(bind-val qbme float 0.0)
(bind-val np double 0.0)
(bind-val affp float 0.0)
;; declare scalars for MPI code
(bind-val ntpose i32 1)
(bind-val nvp_ptr i32*)
(bind-val nvp i32 0)
(bind-val idproc_ptr i32*)
(bind-val kstrt i32 0)
(bind-val nypmx_ptr i32*)
(bind-val nypmn_ptr i32*)
(bind-val nyp_ptr i32*)
(bind-val noff_ptr i32*)

(impc:aot:do-or-emit
 (call-as-xtlang
  (set! nx (<< 1:i32 indx))
  (set! ny (<< 1:i32 indy))
  (set! nxh (/ nx 2))
  (set! nyh (/ ny 2))
  (set! nxe (+ nx 2))
  (set! nye (+ ny 2))
  (set! nxeh (/ nxe 2))
  (set! nnxe (* ndim nxe))
  (set! nxyh (/ (if (> nx ny) nx ny) 2))
  (set! nxhy (if (> nxh ny) nxh ny))
  (set! ny1 (+ ny 1))
  (set! nloop (convert (+ (/ tend dt) .0001) i32))(set! qbme qme)
  (set! np (* (convert npx double) (convert npy double)))
  (set! affp (convert (/ (* (convert nx double)
                            (convert ny double))
                         np)
                      float))
  (cppinit2 idproc_ptr nvp_ptr 0 null)
  (set! kstrt (+ (pref idproc_ptr 0) 1))
  (set! nvp (pref nvp_ptr 0))
  (if (> nvp ny)
      (begin
        (if (= kstrt 1)
            (printf "Too many processors requested: ny nvp=%d %d\n" ny nvp))
        (cppexit)))))

;; initialize data for MPI code
(bind-val edges |2,float|)

;; initialize additional scalars for MPI code
;; kxp = number of complex grids in each field partition in x direction
(bind-val kxp i32 0)
;; kyp = number of complex grids in each field partition in y direction
(bind-val kyp i32 0)
;; npmax = maximum number of electrons in each partition
(bind-val npmax i32 0)
;; nbmax = size of buffer for passing particles between processors
(bind-val nbmax i32 0)
;; ntmax = size of ihole buffer for particles leaving processor
(bind-val ntmax i32 0)

(impc:aot:do-or-emit
 (call-as-xtlang
  (set! kxp (+ (/ (- nxh 1) nvp) 1))
  (set! kyp (+ (/ (- ny 1) nvp) 1))
  (set! npmax (convert (* (/ np (convert nvp)) 1.25) i32))
  (set! nbmax (/ npmax 10))
  (set! ntmax (* 2 nbmax))))

;; declare and allocate arrays for standard code:

;; part, part2 = particle arrays
(bind-val part float*)
(bind-val part2 float*)
(bind-val tpart float*) ;; tmp ptr (for ptr swaps)

;; qe = electron charge density with guard cells
(bind-val qe float*)
;; fxye = smoothed electric field with guard cells
(bind-val fxye float*)
;; qt = scalar charge density field array in fourier space
(bind-val qt Complexf*)
;; fxyt = vector electric field in fourier space
(bind-val fxyt Complexf*)
;; ffc = form factor array for poisson solver
(bind-val ffc Complexf*)
;; mixup = bit reverse table for FFT
(bind-val mixup i32*)
;; sct = sine/cosine table for FFT
(bind-val sct Complexf*)
;; ihole = location of hole left in particle arrays
(bind-val ihole i32*)
;; npic = scratch array for reordering particles
(bind-val npic i32*)
(bind-val wtot |4,float|) ;; float[4] in original C code
(bind-val work |4,float|) ;; float[4] in original C code
(bind-val info |7,i32|)   ;; i32[7] in original C code
;; declare allocate arrays for MPI code:
;; bs/br = complex send/receive buffers for data transpose
(bind-val bs Complexf*)
(bind-val br Complexf*)
;; sbufl/sbufr = particle buffers sent to nearby processors
;; rbufl/rbufr = particle buffers received from nearby processors
(bind-val sbufl float*)
(bind-val sbufr float*)
(bind-val rbufl float*)
(bind-val rbufr float*)
;; scr = guard cell buffer received from nearby processors
(bind-val scr float*)

;; timing stuff (not used in the current version of the bpic_step main loop)

;; float time
;; struct timeval itime
;; float tdpost = 0.0, tguard = 0.0, ttp = 0.0, tfield = 0.0
;; float tpush = 0.0, tsort = 0.0, tmov = 0.0
;; float tfft[2] = {0.0,0.0}
;; double dtime
(bind-val ttp_ptr float*) ;; needed as argument to cwppfft2r
(bind-val isign i32 0)
(bind-val nps i32 1)
(bind-val npp_ptr i32*)
(bind-val ierr_ptr i32*)

(impc:aot:do-or-emit
 (call-as-xtlang
  ;; init MPI partition variables: edges, nyp, noff, nypmx
  ;; edges[0:1] = lower:upper boundary of particle partition
  ;; nyp = number of primary (complete) gridpoints in particle partition
  ;; noff = lowermost global gridpoint in particle partition
  ;; nypmx = maximum size of particle partition, including guard cells
  ;; nypmn = minimum value of nyp
  (pset! npp_ptr 0 0)
  (cpdicomp2l (aref-ptr edges 0) nyp_ptr noff_ptr nypmx_ptr nypmn_ptr ny kstrt nvp idps)
  (if (< (pref nypmn_ptr 0) 1)
      (begin
        (if (= kstrt 1)
            (printf "combination not supported nvp ny = %d %d\n" nvp ny))
        (cppexit)))))

(bind-func ppic2_alloc_arrays
  (lambda ()
    (println "allocating memory for data arrays")
    (let ((nypmx (pref nypmx_ptr 0))
          ;; standard code
          (part_:float* (halloc (* idimp npmax)))
          (part2_:float* (halloc (* idimp npmax)))
          (qe_:float* (halloc (* nxe nypmx)))
          (fxye_:float* (halloc (* ndim nxe nypmx)))
          (qt_:Complexf* (halloc (* nye kxp)))
          (fxyt_:Complexf* (halloc (* ndim nye kxp)))
          (ffc_:Complexf* (halloc (* nyh kxp)))
          (mixup_:i32* (halloc nxhy))
          (sct_:Complexf* (halloc nxyh))
          (ihole_:i32* (halloc (+ ntmax 1)))
          (npic_:i32* (halloc nypmx))
          ;; malloc
          (bs_:Complexf* (halloc (* ndim kxp kyp)))
          (br_:Complexf* (halloc (* ndim kxp kyp)))
          (sbufl_:float* (halloc (* idimp nbmax)))
          (sbufr_:float* (halloc (* idimp nbmax)))
          (rbufl_:float* (halloc (* idimp nbmax)))
          (rbufr_:float* (halloc (* idimp nbmax)))
          (scr_:float* (halloc (* ndim nxe)))
          )
      (set! part part_)
      (set! part2 part2_)
      (set! qe qe_)
      (set! fxye fxye_)
      (set! qt qt_)
      (set! fxyt fxyt_)
      (set! ffc ffc_)
      (set! mixup mixup_)
      (set! sct sct_)
      (set! ihole ihole_)
      (set! npic npic_)
      (set! bs bs_)
      (set! br br_)
      (set! sbufl sbufl_)
      (set! sbufr sbufr_)
      (set! rbufl rbufl_)
      (set! rbufr rbufr_)
      (set! scr scr_))))

(impc:aot:do-or-emit (ppic2_alloc_arrays))

(bind-func ppic2_free_arrays
  (lambda ()
    (free part part_)
    (free part2 part2_)
    (free qe)
    (free fxye)
    (free qt)
    (free fxyt)
    (free ffc)
    (free mixup)
    (free sct)
    (free ihole)
    (free npic)
    (free bs)
    (free br)
    (free sbufl)
    (free sbufr)
    (free rbufl)
    (free rbufr)
    (free scr)))

(impc:aot:do-or-emit
 (call-as-xtlang
  ;; prepare fft tables
  (cwpfft2rinit mixup sct indx indy nxhy nxyh)
  ;; calculate form factors
  (cppois22 qt fxyt isign ffc ax ay affp we_ptr nx ny kstrt nye kxp nyh)
  ;; initialize electrons
  (cpdistr2 part (aref-ptr edges 0) npp_ptr nps vtx vty vx0 vy0 npx npy nx ny idimp npmax idps ipbc ierr_ptr)
  ;; check for particle initialization error
  (if (<> (pref ierr_ptr 0) 0)
      (begin
        (if (= kstrt 1)
            (printf "particle initialization error: ierr=%d\n" (pref ierr_ptr 0)))
        (cppexit))))
 1)

(bind-func ppic2_print_energies
  (lambda ()
    (if (= kstrt 1)
        (begin
          (printf "ntime = %d, MPI nodes nvp = %i\n" ntime nvp)
          (printf "Field Kinetic and Total Energies:\n")
          (printf "%e %e %e\n"
                  (convert (pref we_ptr 0) double)
                  (convert (pref wke_ptr 0) double)
                  (convert (+ (pref we_ptr 0)
                              (pref wke_ptr 0)) double))))))

;; stubs (to be redefined later/live)

(bind-func external_field
  (lambda ()
    void))

;; * * * start main iteration loop * * *

(bind-func ppic2_step
  (lambda ()
    ;; calculate current time per step (in seconds)
    (set! steptime (- (clock_clock) steptime))
    ;; deposit charge with standard procedure: updates qe
    (doloop (j (* nxe (pref nypmx_ptr 0)))
      (pset! qe j 0.))
    (cppgpost2l part qe (pref npp_ptr 0) (pref noff_ptr 0) qme idimp npmax nxe (pref nypmx_ptr 0))

    ;; add guard cells with standard procedure: updates qe
    (cppaguard2xl qe (pref nyp_ptr 0) nx nxe (pref nypmx_ptr 0))
    (cppnaguard2l qe scr (pref nyp_ptr 0) nx kstrt nvp nxe (pref nypmx_ptr 0))

    ;; transform charge to fourier space with standard procedure: updates qt
    ;; modifies qe
    (set! isign -1:i32)
    (cwppfft2r (convert qe) qt bs br isign ntpose mixup sct ttp_ptr indx indy kstrt nvp nxeh nye kxp kyp (pref nypmx_ptr 0) nxhy nxyh)

    ;; calculate force/charge in fourier space with standard procedure:
    ;; updates fxyt, we
    (set! isign -1:i32)
    (cppois22 qt fxyt isign ffc ax ay affp we_ptr nx ny kstrt nye kxp nyh)

    ;; transform force to real space with standard procedure: updates fxye
    ;; modifies fxyt
    (set! isign 1:i32)
    (cwppfft2r2 (convert fxye) fxyt bs br isign ntpose mixup sct ttp_ptr indx indy kstrt nvp nxeh nye kxp kyp (pref nypmx_ptr 0) nxhy nxyh)

    ;; copy guard cells with standard procedure: updates fxye
    (cppncguard2l fxye (pref nyp_ptr 0) kstrt nvp nnxe (pref nypmx_ptr 0))
    (cppcguard2xl fxye (pref nyp_ptr 0) nx ndim nxe (pref nypmx_ptr 0))

    (external_field)

    ;; push particles: updates part, wke, and ihole
    (pset! wke_ptr 0 0.0)
    (cppgpush2l part fxye (aref-ptr edges 0) (pref npp_ptr 0) (pref noff_ptr 0) ihole qbme dt wke_ptr nx ny idimp npmax nxe (pref nypmx_ptr 0) idps ntmax ipbc)

    ;; check for ihole overflow error
    (if (< (pref ihole 0) 0)
        (begin
          (pset! ierr_ptr 0 (* -1 (pref ihole 0)))
          (if (= kstrt 1)
              (printf "ihole overflow error: ntmax ih=%d %d\n" ntmax (pref ierr_ptr 0)))
          (cppabort)
          (cppexit)))

    ;; move electrons into appropriate spatial regions: updates part, (pref npp_ptr 0)
    (cppmove2 part (aref-ptr edges 0) npp_ptr sbufr sbufl rbufr rbufl ihole ny kstrt nvp idimp npmax idps nbmax ntmax (aref-ptr info 0))
    ;; check for particle manager error
    (if (<> (aref info 0) 0)
        (begin
          (pset! ierr_ptr 0 (aref info 0))
          (printf "push particle manager error: ierr=%d\n" (pref ierr_ptr 0))
          (cppexit)))

    ;; sort particles for standard code: updates part
    (if (> sortime 0)
        (if (= (% ntime sortime) 0)
            (begin
              (cppdsortp2yl part part2 npic (pref npp_ptr 0) (pref noff_ptr 0) (pref nyp_ptr 0) idimp npmax (pref nypmx_ptr 0))
              ;; exchange pointers
              (set! tpart part)
              (set! part part2)
              (set! part2 tpart))))

    ;; energy diagnostic
    ;; (afill! wtot
    ;;         (pref we_ptr 0)
    ;;         (pref wke_ptr 0)
    ;;         0.0
    ;;         (+ (pref we_ptr 0)
    ;;            (pref wke_ptr 0)))
    ;; (cppsum (aref-ptr wtot 0) (aref-ptr work 0) 4)
    ;; (pset! wke_ptr 0 (aref wtot 1))
    
    (if (= ntime 0)
        (if (= kstrt 1)
            ;; this could be replaced by a call to
            ;; ppic2_print_energies, but then it wouldn't say
            ;; "Initial"
            (ppic2_print_energies)))

    (set! ntime (+ ntime 1))
    ntime))

;; * * * end main iteration loop * * *

;; (bind-func ppic2_loop
;;   (lambda ()
;;     (while (< (ppic2_step) 250)
;;       1)
;;     (ppic2_print_energies)))

(bind-func ppic2_visuals
  (lambda ()
    void))

(bind-func ppic2_loop
  (lambda ()
    (let ((ntime (ppic2_step)))
      (if (= (% ntime 1000) 0)
          (println "ntime:" ntime))
      (ppic2_visuals)
      ;; (callback (+ (now) (/ 44100 5)) ppic2_loop)
      (callback (now) ppic2_loop))))

;; data structure for nanomsg req/rep

;; qt: (* nye kxp)

;;                           0   1     2          3           4             5
;;                           idx ntime part       qt          vxhist        vyhist
(bind-type NodeResponseData <i32,i32,|100,float|,|100,Complexf|,|100,HistBin|,|100,HistBin|>)

;; (println (impc:ir:get-type-size "NodeResponseData")) ;; to find RESPONSE_MSG_SIZE
(bind-val RESPONSE_MSG_SIZE i64 2808)
(bind-val RESPONSE_PARTICLE_COUNT i64 100) ;; keep this up to date with the above named type
(bind-val RESPONSE_VHIST_BIN_COUNT i64 100) ;; keep this up to date with the above named type

(set! *impc:compiler:message:level* 'high)

(impc:aot:insert-footer "xtmppic2")
(define *xtmlib-ppic2-loaded* #t)
