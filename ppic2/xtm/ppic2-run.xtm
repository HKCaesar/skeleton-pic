;;; ppic2.xtm:examples -- example of the pic code in use

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcpic2.dylib

;;; Commentary:

;; to run this with MPI, you'll need an appfile (e.g. ppic2.app), which will look
;; something like:

;; -np 1 extempore --port 7099 --run path/to/ppic2.xtm
;; -np 1 extempore --port 7097 --run path/to/ppic2.xtm
;; ... (depending on how many processes you want to run)

;; then, run extempore with mpi run:

;; > mpirun --app ppic2.app

;;; Code:

;; need to set up the size of our problem

;; now load the libraries - assumes we're running in the skeleton-pic directory
(sys:load "ppic2/xtm/ppic2.xtm")

;; if we're all running locally
;; (sys:load "ppic2/xtm/ppic2-visuals.xtm")

(bind-val nanomsg_port i32 9000)

(sys:load "nanomsg/remote-node.xtm")

(bind-func remote_response_handler
  (let ((resp:NodeResponseData* (zalloc))
        (resp_len RESPONSE_MSG_SIZE)) ;; make sure you update this if you change the NodeResponseData type
    (lambda (buf:i8* buflen:i64)
      (tset! resp 0 (- kstrt 1))
      (tset! resp 1 ntime)
      (let ((part_arr (tref-ptr resp 2))
            (qt_arr (tref-ptr resp 3))
            (vxhist_arr (tref-ptr resp 4))
            (vyhist_arr (tref-ptr resp 5)))
        (doloop (i RESPONSE_PARTICLE_COUNT)
          (aset! part_arr i (pref part i))
          ;; should fix this - probably want to pass the whole qt array
          (aset! qt_arr i (pref qt i))
          ;; histograms
          ;; (aset! (tref-ptr resp 4) i (pref-ptr vhist_data i))
          ;; (aset! (tref-ptr resp 5) i (pref-ptr vhist_data (+ i 100)))
          void))
      (nn_send REMOTE_SOCKET (cast resp i8*) resp_len 0)
      void)))

;; start the loop running
(ppic2_loop)
