(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (glfw_init_and_create_interaction_window width height))

(sys:load "libs/external/nanovg.xtm")

(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))

(sys:load "libs/external/gl/gl-objects.xtm")
(sys:load "libs/external/datavis.xtm")

(call-as-xtlang
 (nvgCreateFont vg "default" "/Library/Fonts/Arial.ttf")
 (nvgFontFace vg "default")
 (nvgFontSize vg 30.))

;; OpenGL setup

;; (call-as-xtlang
;;  (glEnable GL_BLEND)
;;  (glBlendFunc GL_SRC_ALPHA GL_ONE))

;;;;;;;;;;;;
;; fields ;;
;;;;;;;;;;;;

;; this data should have interleaved the `bases' of the field arrows
;; (i.e. the grid) in 2D with the ndim (i.e. 3D) field components

;; (bind-val field_arrows float*)

;; (bind-func ppic2_visuals_field_init
;;   (lambda ()
;;     (let ((field_arrows_:float* (halloc (* 4 nx ny)))
;;           (idx 0))
;;       (set! field_arrows field_arrows_)
;;       ;; set base verts (i.e. every second vec2) to regular grid
;;       (doloop (i nx)
;;         (doloop (j ny)
;;           (set! idx (* (+ (* i nx) j) 4))
;;           (pset! field_arrows
;;                  idx
;;                  (/ (convert i float) (convert nx float)))
;;           (pset! field_arrows
;;                  (+ idx 1)
;;                  (/ (convert j float) (convert ny float)))))
;;       void)))

;; (ppic2_visuals_field_init)

;; (bind-func ppic2_visuals_copy_field_data
;;   (lambda (field:float* scale_factor:float)
;;     (let ((field_arrows_idx 0)
;;           (field_idx 0)
;;           (max_length 0.))
;;       ;; (doloop (k (* nxe ny))
;;       ;;   (set! field_idx (* k ndim))
;;       ;;   (if (> (pref field field_idx) max_length)
;;       ;;       (set! max_length
;;       ;;             (pref field field_idx)))
;;       ;;   (if (> (pref field (+ field_idx 1)) max_length)
;;       ;;       (set! max_length
;;       ;;             (pref field (+ field_idx 1)))))
;;       ;; (if (> max_length 0.25)
;;       ;;     (set! scale_factor (* 0.25 (/ 1.0 max_length))))
;;       (doloop (i nx)
;;         (doloop (j ny)
;;           (set! field_arrows_idx (* (+ (* i nx) j) 4))
;;           (set! field_idx (+ (* i nxe) j 1))
;;           (pset! field_arrows ;; x component
;;                  (+ field_arrows_idx 2)
;;                  (+ (pref field_arrows field_arrows_idx)
;;                     (* scale_factor (pref field field_idx))))
;;           (pset! field_arrows ;; x component
;;                  (+ field_arrows_idx 3)
;;                  (+ (pref field_arrows (+ field_arrows_idx 1))
;;                     (* scale_factor (pref field (+ field_idx 1))))))))))

;; ;; not sure why fxyze tends to get massive (junk) numbers in it, but
;; ;; this hack cleans them out.
;; (bind-func ppic2_visuals_reset_arrows_buffer
;;   (lambda ()
;;     (let ((idx 0))
;;       (doloop (i nx)
;;         (doloop (j ny)
;;           (set! idx (* (+ (* i ny) j) 4))
;;           ;; (println "idx:" idx)
;;           (if (> (fabs (pref field_arrows (+ 2 idx))) 1.0)
;;               (pset! field_arrows
;;                      (+ 2 idx)
;;                      (pref field_arrows (+ 0 idx))))
;;           (if (> (fabs (pref field_arrows (+ 3 idx))) 1.0)
;;               (pset! field_arrows
;;                      (+ 3 idx)
;;                      (pref field_arrows (+ 1 idx)))))))))

;; (bind-func ppic2_visuals_field_draw
;;   (let ((bounds (Rect 0. 0. (convert width) (convert height))))
;;     (lambda (idx:i32)
;;       (ppic2_visuals_copy_field_data fxye .1)
;;       (dv_draw_line_segments vg bounds field_arrows 1000)
;;       void)))

;; magnitude spectrum

(dv_draw_bars.gain 100.)

;; (bind-func ppic2_qt_spectrum_draw
;;   (let ((spec:float* (zalloc nbins))
;;         (bounds:Rect* (Rect (* (convert width) .5)
;;                             (* (convert height) .5)
;;                             (* (convert width) .5)
;;                             (* (convert height) .5))))
;;     (lambda (idx:i32 nbins)
;;       (doloop (i nbins)
;;         (pset! spec i (* .3 (sqrt (+ (* (tref (pref-ptr qt i) 0)
;;                                         (tref (pref-ptr qt i) 0))
;;                                      (* (tref (pref-ptr qt i) 1)
;;                                         (tref (pref-ptr qt i) 1)))))))
;;       (dv_draw_bars vg bounds spec (convert nbins)))))

;; (bind-func ppic2_qe_spectrum_draw
;;   (let ((nbins (/ (* nxe (pref nypmx_ptr 0)) 2))
;;         (spec:float* (zalloc nbins))
;;         (bounds:Rect* (Rect (* (convert width) .5)
;;                             (* (convert height) .5)
;;                             (* (convert width) .5)
;;                             (* (convert height) .5))))
;;     (lambda (idx:i32)
;;       (doloop (i nbins)
;;         (pset! spec i (* .3 (sqrt (+ (* (tref (pref-ptr (cast qe Complexf*) i) 0)
;;                                         (tref (pref-ptr (cast qe Complexf*) i) 0))
;;                                      (* (tref (pref-ptr (cast qe Complexf*) i) 1)
;;                                         (tref (pref-ptr (cast qe Complexf*) i) 1)))))))
;;       (dv_draw_bars vg bounds spec (convert nbins)))))

;;;;;;;;;;;;;;;
;; particles ;;
;;;;;;;;;;;;;;;

(bind-func dv_draw_scatter_points_fixed_size
  "draw 2D points for a scatterplot - particle aware!

@param vg - nanovg context pointer
@param bounds - bounding rect in which to draw the points
@param points - pointer to point data (packed) e.g. x1,y1,x2,y2,...
@param npoints - number of points
@param size - point size"
  (let ((stroke_width 2.:f)
        (padding 20.)
        (colour (NVGcolor 1. 1. 1. .5)))
    (lambda (vg bounds:Rect* points:float* npoints:i64 size:float)
      (if (< npoints 1)
          (begin (println "npoints must be at least 1 for scatter_points") -1)
          (let ((x (+ (tref bounds 0) padding))
                (y (+ (tref bounds 1) padding))
                (w (- (tref bounds 2) (* 2. padding)))
                (h (- (tref bounds 3) (* 2. padding)))
                (i 0))
            ;; (nvgFillWidth vg stroke_width)
            (_nvgFillColor vg colour)
            ;; add circles to path
            (dotimes (i npoints)
              (nvgBeginPath vg)
              (nvgCircle vg
                         (+ x (* w (/ (pref points (* i (convert 4 i64))) (convert nx))))
                         (+ y (* h (- 1. (/ (pref points (+ (* i (convert 4 i64)) 1)) (convert ny)))))
                         size)
              (nvgFill vg))
            0)))))

(bind-func ppic2_visuals_particles_draw
  (let ((bounds (Rect 0. 0. (* .5 (convert width)) (convert height))))
    (lambda (idx:i32 size)
      (dv_draw_scatter_points_fixed_size vg bounds (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY idx) 2) 0) NRM_PARTICLE_COUNT size)
      void)))

;;;;;;;;;;;;;;;;;;;;
;; charge density ;;
;;;;;;;;;;;;;;;;;;;;

(bind-func ppic2_visuals_charge_density_draw
  (let ((padding 20.)
        (bounds (Rect 0. 0. (* .5 (convert width)) (convert height)))
        (tile_fill (NVGcolor .6 1. .1 .35))
        (gain 2000.))
    (lambda (idx:i32)
      (let ((x (+ (tref bounds 0) padding))
            (y (+ (tref bounds 1) padding))
            (w (- (tref bounds 2) (* 2. padding)))
            (h (- (tref bounds 3) (* 2. padding)))
            (i 0) (j 0) (col:i32 0) (row:i32 0)
            (qe:float* null) (noff:i32 0) (nyp:i32 0))
        (dotimes (i (convert LOCAL_SOCKET_ARRAY_SIZE i64))
          (set! qe (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY i) 3) 0))
          (set! noff (tref (aref-ptr NRM_ARRAY i) 7))
          (set! nyp (tref (aref-ptr NRM_ARRAY i) 8))
          (dotimes (col (/ (convert NRM_QE_COUNT i32) nxe))
            (dotimes (row nyp)
              (tset! tile_fill 3 (* gain (pref qe (+ (* col nxe) row))))
              (_nvgFillColor vg tile_fill)
              (nvgBeginPath vg)
              (nvgCircle vg
                         (+ x (* w (/ (convert row float) (convert nx float))))
                         (+ y (* h (- 1. (/ (convert (+ col noff) float) (convert ny float)))))
                         (* gain 10. (pref qe (+ (* col nxe) row))))
              (nvgFill vg))))
        void))))

;; (/ (convert width float) (convert nx float))
;; (/ (convert height float) (convert ny float))

;; this version takes extra arguments to do with the stride required
;; for the part data buffer

;; now for the actual histogram visuals

(bind-func ppic2_accum_vxhist
  (lambda (histlen gain)
    (let ((i 0)
          (j 0)
          (sum_hb:HistBin* null))
      (dotimes (i histlen)
        ;; set up the x-axis (modifies data inplace)
        (set! sum_hb (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY 0) 4) i))
        (tset! sum_hb 0 (/ (convert i float) (convert histlen float)))
        (dotimes (j (convert LOCAL_SOCKET_ARRAY_SIZE i64))
          ;; accumulate the hist data into the lowest HistBin array
          (tset! sum_hb 1 (+ (tref sum_hb 1) (tref (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY j) 4) i) 1))))
        (tset! sum_hb 1 (* (tref sum_hb 1) gain))))))

(bind-func ppic2_accum_vyhist
  (lambda (histlen gain)
    (let ((i 0)
          (j 0)
          (sum_hb:HistBin* null))
      (dotimes (i histlen)
        ;; set up the x-axis (modifies data inplace)
        (set! sum_hb (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY 0) 5) i))
        (tset! sum_hb 0 (/ (convert i float) (convert histlen float)))
        (dotimes (j (convert LOCAL_SOCKET_ARRAY_SIZE i64))
          ;; accumulate the hist data into the lowest HistBin array
          (tset! sum_hb 1 (+ (tref sum_hb 1) (tref (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY j) 5) i) 1))))
        (tset! sum_hb 1 (* (tref sum_hb 1) gain))))))

(bind-func ppic2_visuals_histogram_draw
  (let ((gain .00004)
        (font_size:float 24.)
        (bounds (Rect 0. 0. 0. 0.))
        (hist_height:float (/ (convert height) (convert REMOTE_LOCATION_COUNT))))
    (lambda (idx:i32)
      ;; nvg labels
      ;;(dv_draw_title.font_size font_size)
      ;(dv_draw_line.stroke_width (convert (+ (* (cos (* .00001 (convert (now)))) 1.) 2.) float))
      ;; vx histogram
      (tfill! bounds (* .5 (convert width)) (* (convert idx) hist_height) (* .25 (convert width)) hist_height)
      (dv_draw_title vg bounds "vx")
      (dv_draw_axes_2D vg bounds)
      (ppic2_accum_vxhist NRM_VHIST_BIN_COUNT gain)
      (dv_draw_line vg bounds (cast (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY 0) 4) 0) float*) NRM_VHIST_BIN_COUNT)
      ;; vx histogram
      (tset! bounds 0 (* .75 (convert width)))
      (dv_draw_title vg bounds "vy")
      (dv_draw_axes_2D vg bounds)
      (ppic2_accum_vyhist NRM_VHIST_BIN_COUNT gain)
      (dv_draw_line vg bounds (cast (aref-ptr (tref-ptr (aref-ptr NRM_ARRAY 0) 5) 0) float*) NRM_VHIST_BIN_COUNT)
      void)))

;; (bind-func external_field
;;   (lambda ()
;;     (doloop (i (convert np i64))
;;       (if (and (< (pref part (+ (* i (convert 4 i64)) 1)) (+ (convert nyh) 2.))
;;                (> (pref part (+ (* i (convert 4 i64)) 1)) (- (convert nyh) 2.))
;;                (< (random) .1))
;;           (pset! part (+ (* i (convert 4 i64)) 3) (* -1. (pref part (+ (* i (convert 4 i64)) 3))))))))

;; load indicators

(bind-dylib libc
  (cond ((string=? (sys:platform) "OSX") "libc.dylib")
        ((string=? (sys:platform) "Linux") "libc.so")
        ((string=? (sys:platform) "Windows") "libc.dll")))

(bind-lib libc getloadavg [i32,double*,i32]*)

(bind-func print_loadavg
  (lambda ()
    (let ((load:double* (salloc 3)))
      (if (<> (getloadavg load 3) -1)
          (begin
            (println "load average")
            (println " 1 min:"(pref load 0))
            (println " 5 min:"(pref load 1))
            (println "15 min:"(pref load 2))
            (println))))))

