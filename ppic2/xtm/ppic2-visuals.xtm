(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/nanovg.xtm")

(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))

;; set up the font
(call-as-xtlang
 (nvgCreateFont vg "SCP" "/Library/Fonts/SourceCodePro-Regular.otf")
 (nvgFontFace vg "SCP")
 (nvgFontSize vg 30.))

(sys:load "libs/external/gl/gl-objects.xtm")
(sys:load "libs/external/datavis.xtm")

;; OpenGL setup

;;;;;;;;;;;;
;; fields ;;
;;;;;;;;;;;;


;; this data should have interleaved the `bases' of the field arrows
;; (i.e. the grid) in 2D with the ndim (i.e. 3D) field components

(bind-val field_arrows float*)

(bind-func ppic2_visuals_field_init
  (lambda ()
    (let ((field_arrows_:float* (halloc (* 4 nx ny)))
          (idx 0))
      (set! field_arrows field_arrows_)
      ;; set base verts (i.e. every second vec2) to regular grid
      (doloop (i nx)
        (doloop (j ny)
          (set! idx (* (+ (* i nx) j) 4))
          (pset! field_arrows
                 idx
                 (/ (convert i float) (convert nx float)))
          (pset! field_arrows
                 (+ idx 1)
                 (/ (convert j float) (convert ny float)))))
      void)))

(ppic2_visuals_field_init)

(bind-func ppic2_visuals_copy_field_data
  (lambda (field:float* scale_factor:float)
    (let ((field_arrows_idx 0)
          (field_idx 0)
          (max_length 0.))
      ;; (doloop (k (* nxe ny))
      ;;   (set! field_idx (* k ndim))
      ;;   (if (> (pref field field_idx) max_length)
      ;;       (set! max_length
      ;;             (pref field field_idx)))
      ;;   (if (> (pref field (+ field_idx 1)) max_length)
      ;;       (set! max_length
      ;;             (pref field (+ field_idx 1)))))
      ;; (if (> max_length 0.25)
      ;;     (set! scale_factor (* 0.25 (/ 1.0 max_length))))
      (doloop (i nx)
        (doloop (j ny)
          (set! field_arrows_idx (* (+ (* i nx) j) 4))
          (set! field_idx (+ (* i nxe) j 1))
          (pset! field_arrows ;; x component
                 (+ field_arrows_idx 2)
                 (+ (pref field_arrows field_arrows_idx)
                    (* scale_factor (pref field field_idx))))
          (pset! field_arrows ;; x component
                 (+ field_arrows_idx 3)
                 (+ (pref field_arrows (+ field_arrows_idx 1))
                    (* scale_factor (pref field (+ field_idx 1))))))))))

;; not sure why fxyze tends to get massive (junk) numbers in it, but
;; this hack cleans them out.
(bind-func ppic2_visuals_reset_arrows_buffer
  (lambda ()
    (let ((idx 0))
      (doloop (i nx)
        (doloop (j ny)
          (set! idx (* (+ (* i ny) j) 4))
          ;; (println "idx:" idx)
          (if (> (fabs (pref field_arrows (+ 2 idx))) 1.0)
              (pset! field_arrows
                     (+ 2 idx)
                     (pref field_arrows (+ 0 idx))))
          (if (> (fabs (pref field_arrows (+ 3 idx))) 1.0)
              (pset! field_arrows
                     (+ 3 idx)
                     (pref field_arrows (+ 1 idx)))))))))

(bind-func ppic2_visuals_field_draw
  (let ((bounds (Rect 0. 0. (convert width) (convert height))))
    (lambda ()
      (ppic2_visuals_copy_field_data fxye .1)
      (dv_draw_line_segments vg bounds field_arrows 1000)
      void)))

;;;;;;;;;;;;;;;
;; particles ;;
;;;;;;;;;;;;;;;

(bind-func dv_draw_scatter_points_fixed_size
  "draw 2D points for a scatterplot

@param vg - nanovg context pointer
@param bounds - bounding rect in which to draw the points
@param points - pointer to point data (packed) e.g. x1,y1,x2,y2,...
@param npoints - number of points
@param size - point size"
  (lambda (vg bounds:Rect* points:float* npoints:i64 size:float)
    (if (< npoints 1)
        (begin (println "npoints must be at least 1 for scatter_points") -1)
        (letz ((padding 0.1)
               (x (+ (tref bounds 0) (* (tref bounds 2) padding)))
               (y (+ (tref bounds 1) (* (tref bounds 3) padding)))
               (w (* (tref bounds 2) (- 1. (* 2. padding))))
               (h (* (tref bounds 3) (- 1. (* 2. padding))))
               (i 0))
          (_nvgStrokeColor vg (NVGcolor 1. 1. 1. .1))
          (nvgStrokeWidth vg 2.)
          (nvgBeginPath vg)
          ;; add circles to path
          (dotimes (i npoints)
            (nvgCircle vg
                       (+ x (* w (/ (pref points (* 4 i)) (convert nx))))
                       (+ y (* h (- 1. (/ (pref points (+ (* i 4) 1)) (convert ny)))))
                       size))
          (nvgStroke vg)
          0))))

(bind-func ppic2_visuals_particles_draw
  (let ((bounds (Rect 0. 0. (convert width) (convert height))))
    (lambda ()
      (dv_draw_scatter_points vg bounds part (convert np) 3.)
      void)))

;;;;;;;;;;;;;;;;;;;;
;; charge density ;;
;;;;;;;;;;;;;;;;;;;;

(bind-func ppic2_visuals_charge_density_draw
  (let ((bounds (Rect 0. 0. (convert width) (convert height)))
        (tile_fill (NVGcolor 1. 1. 1. 1.)))
    (lambda ()
      (let ((padding 0.1)
            (x (+ (tref bounds 0) (* (tref bounds 2) padding)))
            (y (+ (tref bounds 1) (* (tref bounds 3) padding)))
            (w (* (tref bounds 2) (- 1. (* 2. padding))))
            (h (* (tref bounds 3) (- 1. (* 2. padding)))))
        ;; add circles to path
        (doloop (col nx)
          (doloop (row ny)
            (tset! tile_fill 3 (* 2000. (pref qe (+ (* col nxe) row))))
            (_nvgFillColor vg tile_fill)
            (nvgBeginPath vg)
            (nvgRect vg
                     (+ x (* w (/ (convert col float) (convert nx float))))
                     (+ y (* h (- 1. (/ (convert row float) (convert ny float)))))
                     (/ (convert width float) (convert nx float))
                     (/ (convert height float) (convert ny float)))
            (nvgFill vg)))
        void))))

;; TODO start from fixed (and known) part buffer, work from there

;; histograms (currently taken from math.xtm, but with some modifications)

(bind-type HistBin <float,float>
  "a histogram bin: <lower,count>")

(bind-func HistBin_print
  "specialised print function for HistBin*"
  (lambda (histbin:HistBin*)
    (if (null? histbin)
        (printf "<HistBin 0x0>")
        (printf "<HistBin %p minval=%f count=%f>"
                histbin
                (convert (tref histbin 0) double)
                (convert (tref histbin 1) double)))
    void))

(bind-poly print HistBin_print)

(bind-func HistBin_toString
  "specialised toString function for HistBin*"
  (lambda (histbin:HistBin*)
    (let ((str:i8* (salloc 256)))
      (if (null? histbin)
          (sprintf str "<HistBin 0x0>")
          
          (sprintf str
                   "<HistBin %p minval=%f count=%f>"
                   histbin
                   (convert (tref histbin 0) double)
                   (convert (tref histbin 1) double)))
      (Str str))))

(bind-poly toString HistBin_toString)

;; this version takes extra arguments to do with the stride required
;; for the part data buffer

(bind-func histogram_float_full
  (lambda (hist:HistBin* buf:float* buflen lower upper nbins amp dc)
    (let ((current_bin:HistBin* null)
          (range (- upper lower))
          (i 0))
      (if (not (> range 0.))
          (begin
            (println "Error in histogram: range (- upper lower) must be greater than 0.0")
            null)
          (begin
            ;; setup the bins
            (doloop (i nbins)
              (tset! (pref-ptr hist i)
                     0
                     (+ lower (* (convert i) (/ range (convert nbins)))))
              (tset! (pref-ptr hist i) 1 0.))
            (doloop (i buflen)
              (set! current_bin
                    ;; use "mod nbins" to make sure it always goes
                    ;; into a valid slot in memory
                    (pref-ptr hist (% (convert (* (convert nbins float) (/ (- (pref buf (+ (* i amp) dc)) lower) range)) i64) nbins)))
              (tset! current_bin 1 (+ (tref current_bin 1) 1.0)))
            hist)))))

(bind-func histogram_float_range
  "like the full version, but use the min and max values in the buffer as upper and lower"
  (lambda (hist:HistBin* buf:float* buflen nbins amp dc)
    (let ((lower 0.0)
          (upper 0.0))
      ;; find max/min values
      (doloop (i buflen)
        (if (< (pref buf i) lower)
            (set! lower (pref buf i)))
        (if (> (pref buf i) upper)
            (set! upper (pref buf i))))
      (histogram_float_full hist buf buflen lower upper nbins amp dc))))

(bind-poly histogram histogram_float_full)
(bind-poly histogram histogram_float_range)

;; now for the actual histogram visuals

(bind-val vhist_nbins i64 100)
(bind-val vhist_data HistBin*)

(bind-func ppic2_visuals_vhist_init
  (lambda ()
    (let ((hb:HistBin* (halloc (* vhist_nbins 3))))
      (set! vhist_data hb))))

(ppic2_visuals_vhist_init)

(bind-func ppic2_visuals_vhist_draw
  (let ((bounds (Rect (* (convert width) .5) 0.
                      (* (convert width) .5) (* (convert height) .5)))
        (xcolor (NVGcolor 1. 0. 0. 1.))
        (xrect (Rect (tref bounds 0) (tref bounds 1)
                     (/ (tref bounds 2) 2.) (tref bounds 3)))
        (ycolor (NVGcolor 0. 1. 0. 1.))
        (yrect (Rect (+ (tref bounds 0) (/ (tref bounds 2) 2.)) (tref bounds 1)
                     (/ (tref bounds 2) 2.) (tref bounds 3)))
        (histrange 5.)
        (histscale .0002)
        (font_size 30.))
    (lambda ()
      ;; x histogram
      (histogram vhist_data part (convert np) (* -1. histrange) histrange vhist_nbins 4 2)
      ;; y histogram
      (histogram (pref-ptr vhist_data vhist_nbins) part (convert np) (* -1. histrange) histrange vhist_nbins 5 3)
      ;; z histogram
      (histogram (pref-ptr vhist_data (* 2 vhist_nbins)) part (convert np) (* -1. histrange) histrange vhist_nbins 5 4)
      ;; apply some scaling
      (doloop (i (* 3 vhist_nbins))
        (tset! (pref-ptr vhist_data i) 0 (+ .5 (/ (tref (pref-ptr vhist_data i) 0) (* 2. histrange))))
        (tset! (pref-ptr vhist_data i) 1 (* (tref (pref-ptr vhist_data i) 1) histscale)))
      ;; nvg labels
      (nvgFontSize vg font_size)
      ;; vx histogram
      ;; (dv_draw_title vg xrect "vx")
      (dv_draw_axes_2D vg xrect)
      (dv_draw_line vg xrect (cast vhist_data float*) vhist_nbins)
      ;; ;; vy histogram
      ;; (dv_draw_title vg yrect "vy")
      (dv_draw_axes_2D vg yrect)
      (dv_draw_line vg yrect (cast (pref-ptr vhist_data vhist_nbins) float*) vhist_nbins)
      void)))

;; (call-as-xtlang
;;  (doloop (i (* 3 vhist_nbins))
;;    (println (pref-ptr vhist_data i))))

;; load indicators

(bind-dylib libc
  (cond ((string=? (sys:platform) "OSX") "libc.dylib")
        ((string=? (sys:platform) "Linux") "libc.so")
        ((string=? (sys:platform) "Windows") "libc.dll")))

(bind-lib libc getloadavg [i32,double*,i32]*)

(call-as-xtlang
 (let ((load:double* (salloc 3)))
   (if (<> (getloadavg load 3) -1)
       (doloop (i 3)
         (println (pref load i))))))

;; framebuffer & backing textures

(bind-val fbo FBO*)
(bind-val ss_quad_vao VAO*)
(bind-val post_process_sp ShaderProgram)

(bind-func ppic2_visuals_framebuffer_init
  (lambda (vsource fsource)
    (let ((fbw_ptr:i32* (salloc))
          (fbh_ptr:i32* (salloc)))
      (glfwGetFramebufferSize window fbw_ptr fbh_ptr)
      (println (set! fbo (FBO_create_with_textures (pref fbw_ptr 0) (pref fbh_ptr 0) #t)))
      (set! ss_quad_vao (VAO_create_ss_quad))
      (set! post_process_sp (ShaderProgram_create vsource fsource))
      void)))

(ppic2_visuals_framebuffer_init
 (sys:slurp-file (string-append *skeleton-pic-path* "ppic2/xtm/ppic2-framebuffer.vert"))
 (sys:slurp-file (string-append *skeleton-pic-path* "ppic2/xtm/ppic2-framebuffer.frag")))

(bind-func ppic2_visuals_draw_framebuffer
  (lambda ()
    ;; bind default framebuffer
    (glBindFramebuffer GL_FRAMEBUFFER 0)
    ;; clear the framebuffer's colour and depth buffers
    (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; our post-processing shader for the screen-space quad
    (glUseProgram post_process_sp)
    ;; bind the quad's VAO
    (glBindVertexArray (VAO_id ss_quad_vao))
    ;; activate the first texture slot and put texture from previous pass in it
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D (FBO_color_texture fbo))
    ;; draw the quad
    (glDrawArrays GL_TRIANGLE_STRIP 0 4)))

;; draw all the things

(bind-func ppic2_visuals_loop
  (let ((drawbufs_ptr:GLenum* (zalloc)))
    (pset! drawbufs_ptr 0 GL_COLOR_ATTACHMENT0)
    (lambda (time:i64 delta_t:double)
      ;; set FBO as render target
      (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo))
      (glDrawBuffers 1 drawbufs_ptr)
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; nanovg
      (nvgBeginFrame vg width height pixel_ratio)
      (nvgResetTransform vg)
      (ppic2_visuals_particles_draw)
      ;; (ppic2_visuals_field_draw)
      (ppic2_visuals_vhist_draw)
      (nvgEndFrame vg)
      ;; render FBO to screen
      (ppic2_visuals_draw_framebuffer)
      ;; poll events, swap buffers
      (glfwPollEvents)
      (glfwSwapBuffers window)
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time ppic2_visuals_loop next_time delta_t)))))

;; start it running
(ppic2_visuals_loop (now) (/ 1. 30.))
