;;; ppic2.xtm:examples -- run the pic code visualisations on a local node

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcpic2.dylib

;;; Commentary:

;; for this file, extempore needs to be run from the skeleton-pic
;; directory

;; to run this with MPI, you'll need an appfile (e.g. ppic2.app), which will look
;; something like:

;; -np 1 extempore --port 7099 --run path/to/ppic2.xtm
;; -np 1 extempore --port 7097 --run path/to/ppic2.xtm
;; ... (depending on how many processes you want to run)

;; then, run extempore with mpi run:

;; > mpirun --app ppic2.app

;;; Code:

;; (sys:load "ppic2/xtm/ppic2.xtm")
(sys:load "libs/core/math.xtm")
(sys:load "libs/external/nanomsg.xtm")
(or (sys:load "ppic2/xtm/ppic2-common.xtm" 'quiet)
    (sys:load "/Users/ben/Code/src/skeleton-pic/ppic2/xtm/ppic2-common.xtm"))

(bind-val LOCAL_SOCKET_ARRAY |64,i32|)
(bind-val LOCAL_SOCKET_ARRAY_SIZE i32 64)
;; (bind-val LOCAL_START_PORT i32 13000)
(bind-val LOCAL_START_PORT i32 9000)

(bind-val REMOTE_LOCATION_COUNT i64 1)
(bind-val REMOTE_NODES_PER_LOCATION i64 1)
(bind-val NRM_ARRAY |32,NodeResponseMsg|) ;; size should be at least LOCAL_SOCKET_ARRAY_SIZE

(or (sys:load "ppic2/xtm/ppic2-visuals.xtm" 'quiet)
    (sys:load "/Users/ben/Code/src/skeleton-pic/ppic2/xtm/ppic2-visuals.xtm"))

(bind-func local_create_sockets
  (lambda (nsock:i32)
    (doloop (i nsock)
      (aset! LOCAL_SOCKET_ARRAY i (nnsock_create NN_PAIR)))
    (set! LOCAL_SOCKET_ARRAY_SIZE nsock)))

(bind-func local_connect_sockets
  (lambda (start_port:i32)
    (let ((port_forward_address:i8* (zalloc 256)))
      (doloop (i LOCAL_SOCKET_ARRAY_SIZE)
        (sprintf port_forward_address "tcp://127.0.0.1:%d" (+ i start_port))
        (nnsock_connect (aref LOCAL_SOCKET_ARRAY i) port_forward_address)))))

(bind-func local_disconnect_sockets
  (lambda ()
    (doloop (i LOCAL_SOCKET_ARRAY_SIZE)
      (nn_close (aref LOCAL_SOCKET_ARRAY i))
      (nn_shutdown (aref LOCAL_SOCKET_ARRAY i) 0))))

(bind-func local_response_handler
  (lambda (node_index:i32 buf:i8* buflen:i64)
    (if (<> buflen NRM_TYPE_SIZE)
        (println "msg doesn't seem to be a NodeResponseMsg, dropping..." buflen))
    (let ((dest_ptr (cast (aref-ptr NRM_ARRAY node_index) i8*))
          (i 0))
      (memcpy dest_ptr buf buflen))
    void))

(bind-func local_nonblocking_nanomsg_loop
  (let ((sndbuflen:i64 1024)
        (sndbuf:i8* (zalloc sndbuflen))
        (rcvbuflen:i64 NRM_TYPE_SIZE)
        (rcvbuf:i8* (zalloc rcvbuflen))
        (continue #t))
    (sprintf sndbuf "ppic2_data")
    (lambda ()
      (doloop (i LOCAL_SOCKET_ARRAY_SIZE)
        (let ((sock (aref LOCAL_SOCKET_ARRAY i)))
          (if (< sock 0)
              (nn_println_strerror)
              (let ((nrcvbytes (nn_recv sock rcvbuf rcvbuflen NN_DONTWAIT))
                    (nsndbytes (nn_send sock sndbuf sndbuflen NN_DONTWAIT)))
                ;; if we get some bytes, trigger the callback
                (if (> nrcvbytes 0)
                    (local_response_handler i rcvbuf rcvbuflen))))))
      (if continue
          (callback (+ (now) 500) local_nonblocking_nanomsg_loop)
          (begin
            (println "stopping local_nonblocking_nanomsg loop")
            0)))))

(bind-func local_send_to_node
  (lambda (node_idx msg msglen)
    (let ((sock (aref LOCAL_SOCKET_ARRAY node_idx))
          (bytes (nn_send sock msg msglen 0)))
      (if (or (< bytes 0) (< bytes (convert msglen)))
          (nn_println_strerror)
          void))))

(bind-func local_send_to_all
  (lambda (msg msglen)
    (doloop (i LOCAL_SOCKET_ARRAY_SIZE)
      (let ((sock (aref LOCAL_SOCKET_ARRAY i))
            (bytes (nn_send sock msg msglen 0)))
        (if (or (< bytes 0) (< bytes (convert msglen)))
            (nn_println_strerror)
            void)))))

;; create & connect sockets
(local_create_sockets
 (call-as-xtlang (* REMOTE_LOCATION_COUNT REMOTE_NODES_PER_LOCATION)))

(local_connect_sockets
 (call-as-xtlang LOCAL_START_PORT))

(local_nonblocking_nanomsg_loop)

;; visualisation data (streamed back from remote nodes)

(bind-func ppic2_visuals
  (lambda ()
    ;; nanovg
    (nvg_clear)
    (nvgBeginFrame vg width height pixel_ratio)
    (nvgResetTransform vg)
    (let ((i:i32 0))
      (dotimes (i LOCAL_SOCKET_ARRAY_SIZE)
        (ppic2_visuals_charge_density_draw i)
        (ppic2_visuals_particles_draw i 5.)
        ;; (ppic2_qt_spectrum_draw i)
        ;; (ppic2_visuals_field_draw i)
        (ppic2_visuals_histogram_draw i)
        void))
    (nvgEndFrame vg)
    ;; poll events, swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)))

(bind-func ppic_visuals_loop
  (lambda (delta_t:double)
    (ppic2_visuals)
    (callback (+ (now) (convert (* 44100. delta_t))) ppic_visuals_loop delta_t)))

(ppic_visuals_loop (/ 1. 20.))
