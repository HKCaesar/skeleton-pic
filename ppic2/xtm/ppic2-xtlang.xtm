(bind-func cpdicomp2l:[void,float*,i32*,i32*,i32*,i32*,i32,i32,i32,i32]*
  (lambda (edges nyp noff nypmx nypmn ny kstrt nvp idps)
    ;; /* this subroutine determines spatial boundaries for uniform particle
    ;;    decomposition, calculates number of grid points in each spatial
    ;;    region, and the offset of these grid points from the global address
    ;;    nvp must be < ny.  some combinations of ny and nvp result in a zero
    ;;    value of nyp.  this is not supported.
    ;;    integer boundaries are set.
    ;;    input: ny, kstrt, nvp, idps, output: edges, nyp, noff, nypmx, nypmn
    ;;    edges[0] = lower boundary of particle partition
    ;;    edges[1] = upper boundary of particle partition
    ;;    nyp = number of primary (complete) gridpoints in particle partition
    ;;    noff = lowermost global gridpoint in particle partition
    ;;    nypmx = maximum size of particle partition, including guard cells
    ;;    nypmn = minimum value of nyp
    ;;    ny = system length in y direction
    ;;    kstrt = starting data block number (processor id + 1)
    ;;    nvp = number of real or virtual processors
    ;;    idps = number of partition boundaries
    ;; local data                                                            */
    (let ((kb (- kstrt 1))
          (kyp (+ (/ (- ny 1) nvp) 1))
          (at1 (convert kyp float))
          (any (convert ny float))
          (mypm:|2,i32|* (salloc))
          (iwork2:|2,i32|* (salloc)))
      ;; /* determine decomposition */
      (pset! edges 0 (* at1 (convert kb)))
      (if (> (pref edges 0) any)
          (pset! edges 0 any))
      (pset! noff 0 (convert (pref edges 0)))
      (pset! edges 1 (* at1 (convert (+ kb 1))))
      (if (> (pref edges 1) any)
          (pset! edges 1 any))
      (set! kb (convert (pref edges 1) i32))
      (pset! nyp 0 (- kb (pref noff 0)))
      ;; /* find maximum/minimum partition size */
      (afill! mypm (pref nyp 0) (* -1 (pref nyp 0)))
      (cppimax (aref-ptr mypm 0) (aref-ptr iwork2 0) 2)
      (pset! nypmx 0 (+ (aref mypm 0) 1))
      (pset! nypmn 0 (* -1 (aref mypm 1)))
      void)))

(bind-func cppgpush2l:[void,float*,float*,float*,i32,i32,i32*,float,float,float*,i32,i32,i32,i32,i32,i32,i32,i32,i32]*
  (lambda (part fxy edges npp noff ihole qbm dt ek nx ny idimp npmax nxv nypmx idps ntmax ipbc)
    ;; /* for 2d code, this subroutine updates particle co-ordinates and
    ;;    velocities using leap-frog scheme in time and first-order linear
    ;;    interpolation in space, with various boundary conditions
    ;;    also determines list of particles which are leaving this processor
    ;;    scalar version using guard cells, for distributed data
    ;;    42 flops/particle, 12 loads, 4 stores
    ;;    input: all except ihole, output: part, ihole, ek
    ;;    equations used are:
    ;;    vx(t+dt/2) = vx(t-dt/2) + (q/m)*fx(x(t),y(t))*dt,
    ;;    vy(t+dt/2) = vy(t-dt/2) + (q/m)*fy(x(t),y(t))*dt,
    ;;    where q/m is charge/mass, and
    ;;    x(t+dt) = x(t) + vx(t+dt/2)*dt, y(t+dt) = y(t) + vy(t+dt/2)*dt
    ;;    fx(x(t),y(t)) and fy(x(t),y(t)) are approximated by interpolation from
    ;;    the nearest grid points:
    ;;    fx(x,y) = (1-dy)*((1-dx)*fx(n,m)+dx*fx(n+1,m)) + dy*((1-dx)*fx(n,m+1)
    ;;       + dx*fx(n+1,m+1))
    ;;    fy(x,y) = (1-dy)*((1-dx)*fy(n,m)+dx*fy(n+1,m)) + dy*((1-dx)*fy(n,m+1)
    ;;       + dx*fy(n+1,m+1))
    ;;    where n,m = leftmost grid points and dx = x-n, dy = y-m
    ;;    part[n][0] = position x of particle n in partition
    ;;    part[n][1] = position y of particle n in partition
    ;;    part[n][2] = velocity vx of particle n in partition
    ;;    part[n][3] = velocity vy of particle n in partition
    ;;    fxy[k][j][0] = x component of force/charge at grid (j,kk)
    ;;    fxy[k][j][1] = y component of force/charge at grid (j,kk)
    ;;    in other words, fxy are the convolutions of the electric field
    ;;    over the particle shape, where kk = k + noff
    ;;    edges[0:1] = lower:upper boundary of particle partition
    ;;    npp = number of particles in partition
    ;;    noff = lowermost global gridpoint in particle partition.
    ;;    ihole = location of hole left in particle arrays
    ;;    ihole[0] = ih, number of holes left (error, if negative)
    ;;    qbm = particle charge/mass
    ;;    dt = time interval between successive calculations
    ;;    kinetic energy/mass at time t is also calculated, using
    ;;    ek = .125*sum((vx(t+dt/2)+vx(t-dt/2))**2+(vy(t+dt/2)+vy(t-dt/2))**2)
    ;;    nx/ny = system length in x/y direction
    ;;    idimp = size of phase space = 4
    ;;    npmax = maximum number of particles in each partition
    ;;    nxv = first dimension of field array, must be >= nx+1
    ;;    nypmx = maximum size of particle partition, including guard cells.
    ;;    idps = number of partition boundaries
    ;;    ntmax = size of hole array for particles leaving processors
    ;;    ipbc = particle boundary condition = (0,1,2,3) =
    ;;    (none,2d periodic,2d reflecting,mixed reflecting/periodic)
    ;; local data
    (let ((mnoff:i32 noff)
          (j:i32 0)
          (nn:i32 0)
          (mm:i32 0)
          (np:i32 0)
          (mp:i32 0)
          (ih:i32 0)
          (nh:i32 0)
          (nxv2:i32 (* 2 nxv))
          (qtm:float (* qbm dt))
          ;; /* set boundary values */
          (edgelx:float 0.)
          (edgely:float 1.)
          (edgerx:float (convert nx))
          (edgery:float (convert (- ny 1)))
          (dxp:float 0.)
          (dyp:float 0.)
          (amx:float 0.)
          (amy:float 0.)
          (dx:float 0.)
          (dy:float 0.)
          (vx:float 0.)
          (vy:float 0.)
          (sum1:double 0.))
      (if (or (= ipbc 2)
              (= ipbc 3))
          (set! edgelx 1.0)
          (set! edgerx (convert (- nx 1))))
      (doloop (j npp)
        ;; /* find interpolation weights */
        (set! nn (convert (pref part (* idimp j))))
        (set! mm (convert (pref part (+ 1 (* idimp j)))))
        (set! dxp (- (pref part (* idimp j)) (convert nn)))
        (set! dyp (- (pref part (+ 1 (* idimp j))) (convert mm)))
        (set! nn (* nn 2))
        (set! mm (* (- mm mnoff) nxv2))
        (set! amx (- 1.0 dxp))
        (set! mp (+ mm nxv2))
        (set! amy (- 1.0 dyp))
        (set! np (+ nn 2))
        ;; /* find acceleration */
        (set! dx
              (+ (* dyp (+ (* dxp (pref fxy (+ np mp))) (* amx (pref fxy (+ nn mp)))))
                 (* amy (+ (* dxp (pref fxy (+ np mm))) (* amx (pref fxy (+ nn mm)))))))
        (set! dy
              (+ (* dyp (+ (* dxp (pref fxy (+ 1 np mp))) (* amx (pref fxy (+ 1 nn mp)))))
                 (* amy (+ (* dxp (pref fxy (+ 1 np mm))) (* amx (pref fxy (+ 1 nn mm)))))))
        ;; /* new velocity */
        (set! vx (pref part (+ 2 (* idimp j))))
        (set! vy (pref part (+ 3 (* idimp j))))
        (set! dx (+ vx (* qtm dx)))
        (set! dy (+ vy (* qtm dy)))
        ;; /* average kinetic energy */
        (set! vx (+ vx dx))
        (set! vy (+ vy dy))
        (set! sum1 (+ sum1 (convert (* vx vx)) (convert (* vy vy))))
        (pset! part (+ 2 (* idimp j)) dx)
        (pset! part (+ 3 (* idimp j)) dy)
        ;; /* new position */
        (set! dx (+ (pref part (* idimp j)) (* dx dt)))
        (set! dy (+ (pref part (+ 1 (* idimp j))) (* dy dt)))
        ;; /* periodic boundary conditions in x */
        (cond ((= ipbc 1)
               (if (< dx edgelx) (set! dx (+ dx edgerx)))
               (if (>= dx edgerx) (set! dx (- dx edgerx))))
              ;; /* reflecting boundary conditions */
              ((= ipbc 2)
               (if (or (< dx edgelx) (>= dx edgerx))
                   (begin
                     (set! dx (pref part (* idimp j)))
                     (pset! part (+ 2 (* idimp j)) (* -1. (pref part (+ 2 (* idimp j)))))))
               (if (or (< dy edgely) (>= dy edgery))
                   (begin
                     (set! dy (pref part (+ 1 (* idimp j))))
                     (pset! part (+ 3 (* idimp j)) (* -1. (pref part (+ 3 (* idimp j))))))))
              ;; /* mixed reflecting/periodic boundary conditions */
              ((= ipbc 3)
               (if (or (< dx edgelx) (>= dx edgerx))
                   (begin
                     (set! dx (pref part (* idimp j)))
                     (pset! part (+ 2 (* idimp j)) (* -1. (pref part (+ 2 (* idimp j)))))))))
        ;; /* find particles out of bounds */
        (if (or (< dy (pref edges 0))
                (>= dy (pref edges 1)))
            (begin
              (if (< ih ntmax)
                  (pset! ihole (+ ih 1) (+ 1 j))
                  (set! nh 1))
              (set! ih (+ ih 1))))
        ;; /* set new position */
        (pset! part (* idimp j) dx)
        (pset! part (+ 1 (* idimp j)) dy))
      ;; /* set end of file flag */
      (if (> nh 0)
          (set! ih (* ih -1)))
      (pset! ihole 0 ih)
      ;; /* normalize kinetic energy */
      (pset! ek 0 (+ (pref ek 0) (convert (* 0.125 sum1))))
      void)))

(bind-func cppgpost2l:[void,float*,float*,i32,i32,float,i32,i32,i32,i32]*
  (lambda (part q npp noff qm idimp npmax nxv nypmx)
    ;; /* for 2d code, this subroutine calculates particle charge density
    ;;    using first-order linear interpolation, periodic boundaries
    ;;    scalar version using guard cells, for distributed data
    ;;    17 flops/particle, 6 loads, 4 stores
    ;;    input: all, output: q
    ;;    charge density is approximated by values at the nearest grid points
    ;;    q(n,m)=qm*(1.-dx)*(1.-dy)
    ;;    q(n+1,m)=qm*dx*(1.-dy)
    ;;    q(n,m+1)=qm*(1.-dx)*dy
    ;;    q(n+1,m+1)=qm*dx*dy
    ;;    where n,m = leftmost grid points and dx = x-n, dy = y-m
    ;;    part[n][0] = position x of particle n in partition
    ;;    part[n][1] = position y of particle n in partition
    ;;    q[k][j] = charge density at grid point (j,kk),
    ;;    where kk = k + noff
    ;;    npp = number of particles in partition
    ;;    noff = lowermost global gridpoint in particle partition.
    ;;    qm = charge on particle, in units of e
    ;;    idimp = size of phase space = 4
    ;;    npmax = maximum number of particles in each partition
    ;;    nxv = first dimension of charge array, must be >= nx+1
    ;;    nypmx = maximum size of particle partition, including guard cells.
    ;; local data                                                            */
    (let ((mnoff:i32 noff)
          (j:i32 0)
          (nn:i32 0)
          (np:i32 0)
          (mm:i32 0)
          (mp:i32 0)
          (dxp:float 0.)
          (dyp:float 0.)
          (amx:float 0.)
          (amy:float 0.))
      (dotimes (j npp)
        ;; /* find interpolation weights */
        (set! nn (convert (pref part (* idimp j))))
        (set! mm (convert (pref part (+ 1 (* idimp j)))))
        (set! dxp (* qm (- (pref part (* idimp j)) (convert nn))))
        (set! dyp (- (pref part (+ 1 (* idimp j))) (convert mm)))
        (set! mm (* nxv (- mm mnoff)))
        (set! amx (- qm dxp))
        (set! mp (+ mm nxv))
        (set! amy (- 1. dyp))
        (set! np (+ nn 1))
        ;; /* deposit charge */
        (pset! q (+ np mp) (+ (pref q (+ np mp)) (* dxp dyp)))
        (pset! q (+ nn mp) (+ (pref q (+ nn mp)) (* amx dyp)))
        (pset! q (+ np mm) (+ (pref q (+ np mm)) (* dxp amy)))
        (pset! q (+ nn mm) (+ (pref q (+ nn mm)) (* amx amy)))))))

(bind-func cppdsortp2yl:[void,float*,float*,i32*,i32,i32,i32,i32,i32,i32]*
  (lambda (parta partb npic npp noff nyp idimp npmax nypm1)
    ;; /* this subroutine sorts particles by y grid
    ;;    linear interpolation, spatial decomposition in y direction
    ;;    parta/partb = input/output particle array
    ;;    part[n][1] = position y of particle n in partition
    ;;    npic = address offset for reordering particles
    ;;    npp = number of particles in partition
    ;;    noff = backmost global gridpoint in particle partition
    ;;    nyp = number of primary gridpoints in particle partition
    ;;    idimp = size of phase space
    ;;    npmax = maximum number of particles in each partition
    ;;    nypm1 = maximum size of particle partition plus one
    ;; local data                                                            */
    (let ((i:i32 0)
          (j:i32 0)
          (k:i32 0)
          (m:i32 0)
          (mnoff:i32 noff)
          (nyp1:i32 (+ 1 nyp))
          (isum:i32 0)
          (ist:i32 0)
          (ip:i32 0))
      ;; /* clear counter array */
      (dotimes (k nyp1)
        (pset! npic k 0))
      ;; /* find how many particles in each grid */
      (dotimes (j npp)
        (set! m (convert (pref parta (+ 1 (* idimp j)))))
        (set! m (- m mnoff))
        (pset! npic m (+ 1 (pref npic m))))
      ;; /* find address offset */
      (dotimes (k nyp1)
        (set! ist (pref npic k))
        (pset! npic k isum)
        (set! isum (+ isum ist)))
      ;; /* find addresses of particles at each grid and reorder particles */
      (dotimes (j npp)
        (set! m (convert (pref parta (+ 1 (* idimp j)))))
        (set! m (- m mnoff))
        (set! ip (pref npic m))
        (dotimes (i idimp)
          (pset! partb (+ i (* idimp ip)) (pref parta (+ i (* idimp j)))))
        (pset! npic m (+ 1 ip))))))

(bind-func cppcguard2xl:[void,float*,i32,i32,i32,i32,i32]*
  (lambda (fxy nyp nx ndim nxe nypmx)
    ;; /* replicate extended periodic vector field in x direction
    ;;    linear interpolation, for distributed data
    ;;    nyp = number of primary (complete) gridpoints in particle partition
    ;;    nx = system length in x direction
    ;;    ndim = leading dimension of array fxy
    ;;    nxe = first dimension of field arrays, must be >= nx+1
    ;;    nypmx = maximum size of particle partition, including guard cells
    ;; local data                                                 */
    (let ((i:i32 0)
          (k:i32 0)
          (kk:i32 0)
          (myp1:i32 (+ nyp 1)))
      ;; /* replicate edges of extended field */
      (dotimes (k myp1)
        (set! kk (* ndim nxe k))
        (dotimes (i ndim)
          (pset! fxy (+ i (* ndim nx) kk) (pref fxy (+ i kk))))))))

(bind-func cppaguard2xl:[void,float*,i32,i32,i32,i32]*
  (lambda (q nyp nx nxe nypmx)
    ;; /* accumulate extended periodic scalar field in x direction
    ;;    linear interpolation, for distributed data
    ;;    nyp = number of primary (complete) gridpoints in particle partition
    ;;    nx = system length in x direction
    ;;    nxe = first dimension of field arrays, must be >= nx+1
    ;;    nypmx = maximum size of particle partition, including guard cells
    ;; local data                                                 */
    (let ((k:i32 0)
          (myp1:i32 (+ nyp 1)))
      ;; /* accumulate edges of extended field */
      (dotimes (k myp1)
        (pset! q (* nxe k) (+ (pref q (* nxe k))
                              (pref q (+ nx (* nxe k)))))
        (pset! q (+ nx (* nxe k)) 0.)))))
