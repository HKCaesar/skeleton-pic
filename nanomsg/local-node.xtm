(sys:load "libs/external/nanomsg.xtm")

(bind-val LOCAL_SOCKET_ARRAY |32,i32|)
(bind-val NUMBER_OF_PROCS i32 32)

(bind-func create_sockets
  (lambda ()
    (let ((port_forward_address:i8* (zalloc 256)))
      (doloop (i NUMBER_OF_PROCS)
        (sprintf port_forward_address "tcp://127.0.0.1:%d" (+ i 13000))
        (aset! LOCAL_SOCKET_ARRAY i (nnsock_create NN_REQ))
        (nnsock_connect (aref LOCAL_SOCKET_ARRAY i) port_forward_address)))))

(create_sockets)

(bind-func node_reply
  (lambda (node_index:i32 buf:i8* buflen:i64)
    (printf "received response from socket %d\n" node_index)
    ;; put the parts back together
    void))

(bind-func nonblocking_read
  (let ((buflen:i64 1024)
        (buf:i8* (zalloc buflen))
        (continue #t))
    (lambda ()
      (doloop (i NUMBER_OF_PROCS)
        (let ((sock (aref LOCAL_SOCKET_ARRAY i)))
          (if (< sock 0)
              (nn_println_strerror)
              (let ((nbytes (nn_recv sock buf buflen NN_DONTWAIT)))
                ;; if we get some bytes, trigger the callback
                (if (> nbytes 0)
                    (node_reply i buf buflen))))))
      (if continue
          (callback (+ (now) 500) nonblocking_read)
          (begin
            (println "stopping nonblocking_read loop")
            0)))))


;; start the read loop running
(nonblocking_read)


(bind-func send_msg
  (lambda (msg)
    (doloop (i NUMBER_OF_PROCS)
      (let ((sock (aref LOCAL_SOCKET_ARRAY i)))
        (let ((msglen (+ (strlen msg) 1))
              (bytes (nn_send sock msg msglen 0)))
          (if (or (< bytes 0) (< bytes (convert msglen)))
              (nn_println_strerror)
              void))))))

;; try it out
(send_msg (string-append "test message" (number->string (random 100))))

;; kill everything
;; (call-as-xtlang
;;  (nonblocking_read.continue #f)
;;  (nn_shutdown SURVEYOR_SOCKET 0))

